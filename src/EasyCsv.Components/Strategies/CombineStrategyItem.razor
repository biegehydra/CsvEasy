@using EasyCsv.Processing
<StrategyItem DisplayName="Combine" Description="Splits column on value" StrategyPicked="DivideAndReplicate">
    <Options>
        <MudListItem>
            <MudCheckBox Label="Remove Joined Columns" @bind-Value="_removeJoinedColumns"></MudCheckBox>
        </MudListItem>
        <MudListItem>
            <MudTextField Placeholder="Delimiter" Variant="Variant.Outlined" @bind-Value="_delimiter"></MudTextField>
        </MudListItem>
        <MudListItem>
            <MudTextField Placeholder="New Column Name" Variant="Variant.Outlined" @bind-Value="_newColumnName"></MudTextField>
        </MudListItem>
        <MudListItem>
            <MudSelect T="string" MultiSelection="true" MultiSelectionTextFunc="@(x => string.Join(", ", x))" SelectedValuesChanged="x => _otherColumns = x.ToArray()">
                @foreach (var value in CsvProcessor.CurrentState.ColumnNames()!)
                {
                    <MudSelectItem Value="value" >@value</MudSelectItem>
                }
            </MudSelect>
        </MudListItem>
    </Options>
</StrategyItem>

@code
{
    [CascadingParameter] private StrategyBucket? StrategyBucket { get; set; }
    [Parameter] public CsvProcessingStepper CsvProcessor { get; set; }
    [Inject] private ISnackbar Snackbar { get; set; }
    private string[] _otherColumns;
    private string _newColumnName;
    private string _delimiter;
    private bool _removeJoinedColumns;

    protected override void OnParametersSet()
    {
        if (StrategyBucket != null)
        {
            _otherColumns = [StrategyBucket.ColumnName];
        }
    }

    private async Task DivideAndReplicate(string columnName)
    {
        var splitParsingStrategy = new JoinColumnsStrategy(_otherColumns, _newColumnName, _delimiter, _removeJoinedColumns);
        var result = await CsvProcessor.PerformCsvStrategy(splitParsingStrategy);
        if (result.Success != true)
        {
            Snackbar?.Add(result.Message);
        }
    }
}
