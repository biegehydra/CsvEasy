<style>
    .mud-input-control-input-container:has(.mud-input-outlined) {
        margin-top: 0px !important;
    }
    .extra-dense {
        padding: 2px 10px !important;
    }
    .text-field-margin-fix .mud-input-slot {
        padding-top: 16px !important;
    }
    .csv-processing-table .mud-table-container {
        max-height: 60vh;
    }

</style>


@if (EasyCsv?.CsvContent != null && EasyCsv.ColumnNames() != null && ProcessingOptions != null) 
{
    <CascadingValue TValue="CsvProcessingTable" Name="ProcessingTable" Value="this" >
        <MudTable T="CsvRow" Class="csv-table-header-matcher" FixedHeader="true" RowsPerPage="100" Items="EasyCsv.CsvContent"
                  Striped="true" Bordered Dense Hover Elevation="2">
            <HeaderContent>
                @foreach (var column in EasyCsv.ColumnNames()!)
                {
                    _popOverDict.TryAdd(column, false);
                    if (!_strategyBuckets.ContainsKey(column))
                    {
                        _strategyBuckets.Add(column, new StrategyBucket(column));
                    }
                    <MudTh>
                        @column
                        <MudIconButton Icon="@Icons.Material.Filled.OpenInFull" OnClick="_ => TogglePopover(column)"></MudIconButton>
                        <MudPopover AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopRight" Open="_popOverDict[column]">
                            <CascadingValue TValue="StrategyBucket" Value="_strategyBuckets[column]">
                                <MudList Clickable="true">
                                    <MudListSubheader>
                                        Column Strategies <MudIconButton Icon="@Icons.Material.Filled.Close" OnClick="x => TogglePopover(column, false)"></MudIconButton>
                                    </MudListSubheader>
                                    <CascadingValue TValue="CsvProcessingStepper" Value="Stepper">
                                        @ProcessingOptions(column)
                                    </CascadingValue>
                                </MudList>
                            </CascadingValue>
                        </MudPopover>
                    </MudTh>
                }
            </HeaderContent>
            <RowTemplate Context="row">
                @foreach (var (key, value) in row)
                {
                    <MudTd>@value</MudTd>
                }
            </RowTemplate>
        </MudTable>
    </CascadingValue>
}

@code {
    private Dictionary<string, bool> _popOverDict = new ();
    private Dictionary<string, StrategyBucket> _strategyBuckets = new();

    private IEasyCsv? _easyCsv;
    [Parameter] public IEasyCsv? EasyCsv
    {
        get => _easyCsv;
        set
        {
            _easyCsv = value;
            OnEasyCsvChanged();
        }
    }
    [Parameter] public RenderFragment<string>? ProcessingOptions { get; set; }
    [Parameter] public CsvProcessingStepper Stepper { get; set; } = null!;

    private void OnEasyCsvChanged()
    {
        _popOverDict.Clear();
        _strategyBuckets.Clear();
    }

    internal void TogglePopover(string column)
    {
        bool value = _popOverDict[column];
        if (value)
        {
            _popOverDict[column] = false;
        }
        else if (!_popOverDict.Values.Any(x => x)) _popOverDict[column] = true;
    }
    internal void TogglePopover(string column, bool open)
    {
        if (!open) _popOverDict[column] = open;
        else if (!_popOverDict.Values.Any(x => x)) _popOverDict[column] = true;
    }
}
