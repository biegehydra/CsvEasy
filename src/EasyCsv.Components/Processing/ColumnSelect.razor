@namespace EasyCsv.Components
@inherits StrategyBucketItemBase
@if (CsvProcessor?.Runner?.CurrentCsvColumnNames != null)
{
    <MudSelect Immediate="Immediate" Disabled="Disabled" Label="@Label" T="string" @bind-Value="ColumnName" Clearable="true" OnClearButtonClick="x => ColumnName = null"
               Variant="@Variant" Style="min-width: 250px;">
        @{
            var columnNames = CsvProcessor.Runner.CurrentCsvColumnNames.Except(ExceptColumns).Where(x => x.Equals(InternalColumnNames.Tags, StringComparison.OrdinalIgnoreCase) == false);
            if (Except != null)
            {
                columnNames = columnNames.Except(Except);
            }
        }
        @foreach (var value in columnNames)
        {
            <MudSelectItem Value="value">@value</MudSelectItem>
        }
    </MudSelect>
}

@code {
    [Parameter] public EventCallback<string> ColumnNameChanged { get; set; }
    private string? _columnName;
    [Parameter]
    public string? ColumnName
    {
        get => _columnName;
        set
        {
            if (value == null)
            {
                if (_columnName != null)
                {
                    _columnName = value;
                    ColumnNameChanged.InvokeAsync(value);
                }
                return;
            }
            if (_columnName?.Equals(value) == true)
            {
                return;
            }
            _columnName = value;
            ColumnNameChanged.InvokeAsync(value);
        }
    }
    /// <summary>
    /// These columns will not be displayed
    /// </summary>
    [Parameter] public IEnumerable<string>? Except { get; set; }
    [Parameter] public bool Immediate { get; set; } = true;
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public string Label { get; set; } = "Column Name";
    [Parameter] public Variant Variant { get; set; } = Variant.Outlined;
    [Parameter] public ICollection<string> ExceptColumns { get; set; } = [];
    [Parameter] public Func<ICollection<string>, string?>? AutoMatchColumn { get; set; }
    protected override void OnInitialized()
    {
        if (AutoMatchColumn != null)
        {
            var columnNames = CsvProcessor?.Runner?.CurrentCsvColumnNames;
            if (columnNames?.Length > 0 && AutoMatchColumn(columnNames) is { } matchedColumn && columnNames.Contains(matchedColumn))
            {
                ColumnName = matchedColumn;
            }
        }
    }

}
