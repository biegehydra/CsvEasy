@namespace EasyCsv.Components
@inherits StrategyBucketItemBase

@if (CsvProcessor?.Runner?.CurrentCsv != null)
{
    <MudSelect Immediate="Immediate" Disabled="Disabled" Label="@Label" T="string" MultiSelection="true" MultiSelectionTextFunc="@(MultiSelectionTextFunc)"
               SelectedValues="ColumnNames" SelectedValuesChanged="x => ColumnNames = x?.ToArray() ?? []" Variant="@Variant" Style="min-width: 300px;"
               Clearable="true" OnClearButtonClick="x => ColumnNames = []" SelectAll="@SelectAll" SelectAllText="@SelectAllText">
        @foreach (var value in CsvProcessor.Runner.CurrentCsv.ColumnNames()!.Where(x => x.Equals(InternalColumnNames.Tags, StringComparison.OrdinalIgnoreCase) == false))
        {
            <MudSelectItem Value="value">@value</MudSelectItem>
        }
    </MudSelect>
}

@code {
    [Parameter] public EventCallback<string[]> ColumnNamesChanged { get; set; }
    private string[] _columnNames = [];
    [Parameter] public string[] ColumnNames
    {
        get => _columnNames;
        set
        {
            if (value == null!)
            {
                if (_columnNames.Length > 0)
                {
                    _columnNames = [];
                    ColumnNamesChanged.InvokeAsync(value);
                }
                return;
            }
            if (_columnNames.Length == value.Length && _columnNames.All(value.Contains))
            {
                return;
            }
            _columnNames = value;
            ColumnNamesChanged.InvokeAsync(value);
        }
    }
    [Parameter] public bool Immediate { get; set; } = true;
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public Variant Variant { get; set; } = Variant.Outlined;
    [Parameter] public string Label { get; set; } = "Column Names";
    [Parameter] public bool InitializeWithStrategyBucketColumnName { get; set; }
    [Parameter] public bool InitializeWithAllColumnNames { get; set; }
    [Parameter] public Func<string[], string>? AllColumnsSelectedText { get; set; }
    [Parameter] public bool SelectAll { get; set; }
    [Parameter] public string? SelectAllText { get; set; }
    [Parameter] public Func<ICollection<string>, string[]?>? AutoMatchColumns { get; set; }

    protected override void OnInitialized()
    {
        if (InitializeWithAllColumnNames)
        {
            var columnNames = CsvProcessor?.Runner?.CurrentCsv?.ColumnNames();
            if (columnNames?.Length > 0)
            {
                ColumnNames = columnNames;
            }
        }
        else if (InitializeWithStrategyBucketColumnName && !string.IsNullOrWhiteSpace(StrategyBucket?.ColumnName) && StrategyBucket.ColumnName != InternalColumnNames.FullCsvOperations)
        {
            ColumnNames = [StrategyBucket.ColumnName];
        }
        else if (AutoMatchColumns != null)
        {
            var columnNames = CsvProcessor?.Runner?.CurrentCsv?.ColumnNames();
            if (columnNames?.Length > 0 && AutoMatchColumns(columnNames) is {Length: > 0} matchedColumns)
            {
                List<string> toSet = new();
                foreach (var matchedColumn in matchedColumns)
                {
                    if (columnNames.Contains(matchedColumn))
                    {
                        toSet.Add(matchedColumn);
                    }
                }
                ColumnNames = toSet.Distinct().ToArray();
            }
        }
    }

    private string MultiSelectionTextFunc(List<string> x)
    {
        if (x == null!) return "";
        var columnNames = CsvProcessor?.Runner?.CurrentCsv?.ColumnNames();
        if (x.Count == columnNames?.Length && AllColumnsSelectedText != null)
        {
            return AllColumnsSelectedText(columnNames);
        }
        if (x.Count == columnNames?.Length)
        {
            return $"All {columnNames.Length} Columns Selected";
        }
        return string.Join(", ", x);
    }

}
