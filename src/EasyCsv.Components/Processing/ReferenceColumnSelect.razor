@namespace EasyCsv.Components
@inherits StrategyBucketItemBase
@if (CsvProcessor?.Runner?.CurrentCsv != null)
{
    <MudSelect T="string" @bind-Value="ReferenceColumnName" Immediate="Immediate" Disabled="Disabled || !CsvProcessor.Runner.IsReferenceIndexValid(ReferenceCsvId)"
               Label="@Label" Clearable="true" OnClearButtonClick="x => ReferenceColumnName = null" Variant="@Variant" Style="min-width: 250px;">
        @{
            string[]? referenceColumnNames;
        }
        @if (CsvProcessor.Runner.IsReferenceIndexValid(ReferenceCsvId) && (referenceColumnNames = CsvProcessor.Runner.ReferenceCsvs[ReferenceCsvId!.Value].Csv.ColumnNames()) != null)
        {
            @foreach (var referenceColumnName in referenceColumnNames.Except(ExceptColumns))
            {
                <MudSelectItem Value="referenceColumnName">@referenceColumnName</MudSelectItem>
            }
        }
    </MudSelect>
}

@code {
    [Parameter] public EventCallback<string?> ReferenceColumnNameChanged { get; set; }
    [Parameter] public int? ReferenceCsvId { get; set; }
    private string? _referenceColumnName;
    [Parameter] public string? ReferenceColumnName
    {
        get => _referenceColumnName;
        set
        {
            if (value == null)
            {
                if (_referenceColumnName != null)
                {
                    _referenceColumnName = value;
                    ReferenceColumnNameChanged.InvokeAsync(value);
                }
                return;
            }
            if (_referenceColumnName?.Equals(value) == true)
            {
                return;
            }
            _referenceColumnName = value;
            ReferenceColumnNameChanged.InvokeAsync(value);
        }
    }
    [Parameter] public bool Immediate { get; set; } = true;
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public string Label { get; set; } = "Reference Column Name";
    [Parameter] public Variant Variant { get; set; } = Variant.Outlined;
    [Parameter] public Func<ICollection<string>, string?>? AutoMatchColumn { get; set; }
    [Parameter] public ICollection<string> ExceptColumns { get; set; } = [];

    private bool _initialized = false;
    protected override void OnParametersSet()
    {
        if (!_initialized && AutoMatchColumn != null && CsvProcessor.Runner?.IsReferenceIndexValid(ReferenceCsvId) == true)
        {
            _initialized = true;
            var referenceColumnNames = CsvProcessor.Runner.ReferenceCsvs[ReferenceCsvId!.Value].Csv.ColumnNames();
            if (referenceColumnNames?.Length > 0 && AutoMatchColumn(referenceColumnNames) is { } matchedColumn && referenceColumnNames.Contains(matchedColumn))
            {
                ReferenceColumnName = matchedColumn;
            }
        }
    }
}