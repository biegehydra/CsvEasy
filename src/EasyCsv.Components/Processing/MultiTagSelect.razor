@namespace EasyCsv.Components
@inherits StrategyBucketItemBase

@if (CsvProcessor?.Runner?.CurrentCsv != null)
{
    if (!HideNoTags || CsvProcessor.Runner.CurrentTags?.Count > 0)
    {
        <MudSelect Immediate="Immediate" Disabled="Disabled" Label="@Label" T="string" MultiSelection="true" MultiSelectionTextFunc="@(x => string.Join(", ", x))"
                   SelectedValues="Tags" SelectedValuesChanged="x => Tags = x?.ToArray() ?? []" Variant="@Variant" Style="min-width: 300px;"
                   Clearable="true" OnClearButtonClick="x => Tags = []" SelectAll="@SelectAll" SelectAllText="@SelectAllText">
            @foreach (var value in CsvProcessor.Runner.CurrentTags?.Except(ExceptTags) ?? [])
            {
                <MudSelectItem Disabled="DisabledTags != null && DisabledTags.Contains(value)" Value="value">@value</MudSelectItem>
            }
        </MudSelect>
    }
}

@code {
    [Parameter] public EventCallback<string[]> TagsChanged { get; set; }
    private string[] _tags = [];
    [Parameter]
    public string[] Tags
    {
        get => _tags;
        set
        {
            if (value == null!)
            {
                if (_tags.Length > 0)
                {
                    _tags = [];
                    TagsChanged.InvokeAsync(value);
                }
                return;
            }
            if (_tags.Length == value.Length && _tags.All(value.Contains))
            {
                return;
            }
            _tags = value;
            TagsChanged.InvokeAsync(value);
        }
    }
    [Parameter] public string[]? DisabledTags { get; set; }
    [Parameter] public bool Immediate { get; set; } = true;
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public string Label { get; set; } = "Column Names";
    [Parameter] public bool SelectAll { get; set; }
    [Parameter] public Variant Variant { get; set; } = Variant.Outlined;
    [Parameter] public string? SelectAllText { get; set; }
    [Parameter] public bool HideNoTags { get; set; }
    [Parameter] public Func<ICollection<string>, string[]?>? AutoMatchTags { get; set; }
    [Parameter] public ICollection<string> ExceptTags { get; set; } = [];

    protected override void OnInitialized()
    {
        if (AutoMatchTags != null)
        {
            var tags = CsvProcessor.Runner?.CurrentTags;
            if (tags?.Count > 0 && AutoMatchTags(tags) is { Length: > 0 } matchedTags)
            {
                List<string> toSet = new();
                foreach (var matchedTag in matchedTags)
                {
                    if (tags.Contains(matchedTag))
                    {
                        toSet.Add(matchedTag);
                    }
                }
                Tags = toSet.Distinct().ToArray();
            }
        }
    }
}

