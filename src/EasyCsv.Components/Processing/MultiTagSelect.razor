@namespace EasyCsv.Components
@inherits StrategyBucketItemBase

@if (CsvProcessor?.Runner?.CurrentCsv != null)
{
    <MudSelect Immediate="Immediate" Disabled="Disabled" Label="@Label" T="string" MultiSelection="true" MultiSelectionTextFunc="@(x => string.Join(", ", x))"
               SelectedValues="Tags" SelectedValuesChanged="x => Tags = x?.ToArray() ?? []" Variant="@Variant"
               Clearable="true" OnClearButtonClick="x => Tags = []" SelectAll="@SelectAll" SelectAllText="@SelectAllText">
        @foreach (var value in _uniqueTags)
        {
            <MudSelectItem Disabled="DisabledTags != null && DisabledTags.Contains(value)" Value="value">@value</MudSelectItem>
        }
    </MudSelect>
}

@code {
    [Parameter] public EventCallback<string[]> TagsChanged { get; set; }
    private string[] _tags = [];
    [Parameter]
    public string[] Tags
    {
        get => _tags;
        set
        {
            if (value == null!)
            {
                if (_tags.Length > 0)
                {
                    _tags = [];
                    TagsChanged.InvokeAsync(value);
                }
                return;
            }
            if (_tags.Length == value.Length && _tags.All(value.Contains))
            {
                return;
            }
            _tags = value;
            TagsChanged.InvokeAsync(value);
        }
    }
    [Parameter] public string[]? DisabledTags { get; set; }
    [Parameter] public bool Immediate { get; set; } = true;
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public string Label { get; set; } = "Column Names";
    [Parameter] public bool InitializeWithStrategyBucketColumnName { get; set; }
    [Parameter] public bool SelectAll { get; set; }
    [Parameter] public Variant Variant { get; set; } = Variant.Outlined;
    [Parameter] public string? SelectAllText { get; set; }

    private HashSet<string> _uniqueTags;

    protected override void OnInitialized()
    {
        _uniqueTags = CsvProcessor?.AllUniqueTags() ?? [];
    }

}

