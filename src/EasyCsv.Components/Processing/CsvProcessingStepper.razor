@namespace EasyCsv.Components
@using EasyCsv.Components.Processing.Dialogs
@using EasyCsv.Components.Processing
<style>
    .csv-processing-download-popup-container {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }
    .csv-file-container {
        display: flex;
        flex-direction: row;
        gap: 8px;
        align-items: center;
    }
    .csv-processing-current-step-container {
        display: flex;
        flex-direction: row;
        align-items: center;
        gap: 20px;
    }
</style>

<ErrorBoundary >
    <ChildContent>
        @if (Runner?.CurrentCsv != null && (ColumnStrategies != null || FullCsvStrategies != null))
        {
            <div style="display: flex; flex-direction: row; width: 100%; padding: 0 15px; align-items: center; justify-content: space-between" >
                <div class="csv-processing-current-step-container">
                    <MudText Typo="Typo.h5">Current Step: @(Runner.CurrentIndex + 1)</MudText>
                    @if (AfterCurrentStep != null)
                    {
                        @AfterCurrentStep
                    }
                </div>
                <div style="display: flex; gap: 20px; flex-direction: row;">
                    @if (Runner.IsCacheIndexValid(Runner.CurrentIndex - 1))
                    {
                        var style = !Runner.IsCacheIndexValid(Runner.CurrentIndex + 1) ? "margin-right: 180px;" : null;
                        <MudButton Disabled="@Busy" Style="@style" OnClick="_ => GoBackStep()" Variant="Variant.Filled" Color="Color.Secondary">Go Back Step</MudButton>
                    }
                    @if (Runner.IsCacheIndexValid(Runner.CurrentIndex + 1))
                    {
                        <MudButton Disabled="@Busy" OnClick="_ => GoForwardStep()" Variant="Variant.Filled" Color="Color.Secondary">Go Forward Step</MudButton>
                    }
                </div>
            </div>
            <br />
            <div style="display: flex; flex-direction: row; justify-content: space-between; align-items: baseline;">
                @{
                    var columnsNames = Runner.CurrentCsvColumnNames;
                }
                <div style="display: flex; flex-direction: row; padding: 0 15px; gap: 50px;">
                    <div style="display: flex; flex-direction: column; gap: 15px;" >
                        <div style="display: flex; flex-direction: row; gap: 8px; align-items: end;" >
                            <MudText Typo="Typo.h6">
                                "Working Csv" Composition
                            </MudText>
                            <MudTooltip Delay="750" Style="max-width: 260px;" >
                                <TooltipContent>
                                    <p>The "Working Csv" is what you are looking at in the table.</p> 
                                    <br/>
                                    <p>It is the result of all previous operations leading up to the CURRENT step, which is not necessarily the last step.</p>
                                    <br/>
                                    <p>To help you keep track of things, below shows the initial csv that was uploaded, and all the csvs that have been added.</p>
                                    @if (_addedCsvsWithEditIndexAdded.Count == 0)
                                    {
                                        <br/>
                                        <p>
                                            * To add a csv and all it's rows to your Working Csv,
                                            select the <b>full csv</b> operations icon, and then select
                                            Add Csv.
                                        </p>
                                    }
                                </TooltipContent>
                                <ChildContent>
                                    <MudIcon Icon="@Icons.Material.Filled.Info"></MudIcon>
                                </ChildContent>
                            </MudTooltip>
                        </div>
                        <div class="csv-file-container">
                            <MudChip T="string"  Color="Color.Dark" Text="@EasyCsvFileName"/>
                            @_initialRowCount&nbsp;rows&nbsp;
                            <MudTooltip RootClass="csv-file-container" Text="Initial Csv">
                                <MudIcon Color="Color.Primary" Icon="@Icons.Material.Filled.Star"></MudIcon>
                            </MudTooltip>
                        </div>
                        @foreach (var (fileName, rowCount, indexAdded, rowEditAdded) in _addedCsvsWithEditIndexAdded.Where(x => x.IndexAdded <= Runner.CurrentIndex && x.EditIndexAdded < Runner.CurrentRowEditIndex))
                        {
                            <div class="csv-file-container">
                                <MudChip T="string"  Color="Color.Dark" Text="@fileName" />
                                @rowCount&nbsp;rows&nbsp;
                                <MudTooltip RootClass="csv-file-container" Text="@($"This Csv was added on step {indexAdded + 1}, edit {rowEditAdded + 1}")">
                                    <MudIcon Color="Color.Secondary" Icon="@Icons.Material.Filled.StarHalf"></MudIcon>
                                </MudTooltip>
                            </div>
                        }
                    </div>
                    <div style="display: flex; flex-direction: column; gap: 15px;" >
                        <div style="display: flex; flex-direction: row; gap: 8px; align-items: end;" >
                            <MudText Typo="Typo.h6">
                                Reference Csvs
                            </MudText>
                            <MudTooltip Delay="750" Style="max-width: 260px;" >
                                <TooltipContent>
                                    <p>Reference Csvs are csvs you upload so that they can be referred to (looked at) during operations on the Working Csv.</p> 
                                    <br/>
                                    <p>They are immutable and cannot be operated on by strategies, they may only be looked at.</p>
                                    @if (Runner!.ReferenceCsvs.Count == 0)
                                    {
                                        <br/>
                                        <p>* To add your first Reference Csv, select the "Add Reference Csv" button on the right.</p>
                                    }
                                </TooltipContent>
                                <ChildContent>
                                    <MudIcon Icon="@Icons.Material.Filled.Info"></MudIcon>
                                </ChildContent>
                            </MudTooltip>
                        </div>
                        @foreach (var (csv, fileName) in Runner!.ReferenceCsvs)
                        {
                            <div class="csv-file-container">
                                <MudChip T="string"  Color="Color.Dark" Text="@fileName" />
                                @csv.RowCount()&nbsp;rows&nbsp;
                                <MudTooltip RootClass="csv-file-container" Text="@($"This is a Reference Csv.")">
                                    <MudIcon Color="Color.Tertiary" Icon="@Icons.Material.Filled.StarBorder"></MudIcon>
                                </MudTooltip>
                            </div>
                        }
                    </div>
                </div>
                <div style="display: flex; flex-direction: row; justify-content: space-between; gap: 20px; align-items: baseline;">
                    @if (EnableControlTagsAndReferencesLocation && columnsNames != null && (columnsNames.Contains(InternalColumnNames.References) || columnsNames.Contains(InternalColumnNames.Tags)))
                    {
                        string text = TagsAndReferencesLocation == ColumnLocation.Beginning ? "Move tags and references columns to end" : "Move tags and references columns to beginning";
                        <MudTooltip Text="@text" Delay="600">
                            <MudIconButton Disabled="@Busy" Variant="Variant.Filled" Color="Color.Tertiary" Icon="@Icons.Material.Filled.SwapHoriz"
                                           OnClick="() => TagsAndReferencesLocation = TagsAndReferencesLocation == ColumnLocation.End ? ColumnLocation.Beginning : ColumnLocation.End" />
                        </MudTooltip>
                    }
                    <MudTooltip Text="Download Snapshot of Current Csv" Delay="600">
                        <MudIconButton Variant="Variant.Filled" Color="Color.Info" Icon="@Icons.Material.Filled.Download"
                                       Disabled="@Busy" OnClick="_ => OpenDownloadDialog()" />
                    </MudTooltip>
                    @if (EnableAddReferenceCsv)
                    {
                        <CsvFileInput ButtonTooltip="Reference Csvs are looked at during some operations" Disabled="@Busy" InputVariant="@FileInputVariant.Button" ButtonText="Add Reference Csv" OnCsvUpload="async x => await AddReferenceCsv(x)"></CsvFileInput>
                    }
                </div>
            </div>
            <br />
            <br />
            <CsvProcessingTable @ref="CsvProcessingTable" Busy="@Busy" ColumnOptions="ColumnStrategies" FullCsvOptions="FullCsvStrategies"  Stepper="this" EasyCsv="Runner.CurrentCsv" />
        }
    </ChildContent>
    <ErrorContent Context="context">
        @if (ErrorBoundaryContent == null)
        {
            <MudText Typo="Typo.h3" >Something went wrong</MudText>
        }
        else
        {
            @ErrorBoundaryContent(context)
        }
    </ErrorContent>
</ErrorBoundary>
@if (Runner is {CurrentCsv: not null, CurrentCsvColumnNames: not null})
{
    <MudDialog @bind-IsVisible="_isDownloadDialogVisible" Class="csv-processing-download-popup" Style="min-width: 600px;">
        <TitleContent>
            <div style="display: flex; flex-direction: row; gap: 10px; justify-content: space-between;" >
                <MudText Class="mb-2" Typo="Typo.h5"><b>Download Snapshot Options</b></MudText>
                <MudIconButton Icon="@Icons.Material.Filled.Close" OnClick="() => { _isDownloadDialogVisible = false; }"></MudIconButton>
            </div>
        </TitleContent>
        <DialogContent >
            <CascadingValue TValue="CsvProcessingStepper" Value="this" IsFixed="true">
                <div class="csv-processing-download-popup-container">
                    <MudTextField T="string" DebounceInterval="SearchDebounceInterval" Immediate="true" Required="true" Label="File Name"
                                  HelperText="Name given to downloaded file" HelperTextOnFocus Variant="Variant.Outlined" @bind-Value="_fileName"
                                  Clearable OnClearButtonClick="x => _sq = null"/>
                    <MudText Typo="Typo.h6">Column Filter (Required)</MudText>
                    <MultiColumnSelect @bind-ColumnNames="_columnsToDownload" InitializeWithAllColumnNames="@AutoSelectAllColumnsDownload" Label="Columns To Download" SelectAll="true" SelectAllText="Download All Columns"></MultiColumnSelect>
                    <MudText Typo="Typo.h6">Search Filter (Optional)</MudText>
                    <MudTextField T="string" DebounceInterval="SearchDebounceInterval" Immediate="true" Label="Search Query"
                                  HelperText="Value to search for" HelperTextOnFocus Variant="Variant.Outlined" @bind-Value="_sq"
                                  Clearable OnClearButtonClick="x => _sq = null"/>
                    <MultiColumnSelect @bind-ColumnNames="_searchColumns" Label="Columns To Search" SelectAll="true" SelectAllText="Search All Columns"></MultiColumnSelect>
                    @if (Runner.CurrentCsvColumnNames.Contains(InternalColumnNames.Tags))
                    {
                        <MudText Typo="Typo.h6">Tags Filter (Optional)</MudText>
                        <MultiTagSelect @bind-Tags="_includeTags" DisabledTags="_excludeTags" Label="Include Tags"></MultiTagSelect>
                        <MultiTagSelect @bind-Tags="_excludeTags" DisabledTags="_includeTags" Label="Exclude Tags"></MultiTagSelect>
                    }
                </div>
            </CascadingValue>
        </DialogContent>
        <DialogActions>
            <MudButton StartIcon="@Icons.Material.Filled.Close" Variant="Variant.Outlined" Color="Color.Default" OnClick="x => _isDownloadDialogVisible = false">Cancel</MudButton>
            <MudButton Disabled="string.IsNullOrWhiteSpace(_fileName)" StartIcon="@Icons.Material.Filled.Download" Variant="Variant.Filled" Color="Color.Info" OnClick="async _ => await DownloadSnapShot()">Download</MudButton>
        </DialogActions>
    </MudDialog>
}
<DuplicateRowsResolver Stepper="this" DuplicateGroup="_duplicateGroup" DuplicateValue="@_duplicateValue" @bind-IsVisible="_duplicateRowsResolveVisible"
                            SingleComplete="SingleComplete"  MultiComplete="MultiComplete" MultiSelect="_multiSelect" 
                            MustSelectRow="_mustSelectRow" OnCancel="OnCancel" ColumnName="@_columnName"
                            ResolveDuplicatesAutoSelect="ResolveDuplicatesAutoSelect" AutoSelectRow="_autoSelectRow"
                            AutoSelectRows="_autoSelectRows">

</DuplicateRowsResolver>
@code {
    private TaskCompletionSource<MultiDuplicateRootPickerResult?>? _multiResolveDuplicateRowTaskSource;
    private TaskCompletionSource<DuplicateRootPickerResult?>? _singleResolveDuplicateRowTaskSource;
    private DuplicateGrouping? _duplicateGroup;
    public Func<CsvRow[], CsvRow?>? _autoSelectRow = null;
    public Func<CsvRow[], CsvRow[]?>? _autoSelectRows = null;
    private string? _duplicateValue;
    private bool _multiSelect;
    private bool _mustSelectRow;
    private string? _columnName;
    private bool _duplicateRowsResolveVisible = false;

    private void OnCancel()
    {
        _singleResolveDuplicateRowTaskSource?.SetResult(null);
        _multiResolveDuplicateRowTaskSource?.SetResult(null);
    }

    private void MultiComplete(MultiDuplicateRootPickerResult result)
    {
        _multiResolveDuplicateRowTaskSource!.SetResult(result);
    }

    private void SingleComplete(DuplicateRootPickerResult result)
    {
        _singleResolveDuplicateRowTaskSource!.SetResult(result);
    }

    private bool _isDownloadDialogVisible = false;
    private string[] _columnsToDownload = [];
    private string[] _searchColumns = [];
    private string[] _includeTags = [];
    private string[] _excludeTags = [];
    private string? _sq;
    private string? _fileName;

    private List<(string FileName, int RowCount, int IndexAdded, int EditIndexAdded)> _addedCsvsWithEditIndexAdded = new();
    public async Task AddCsv(IEasyCsv csv, string csvName)
    {
        if (csv == null! || Runner?.CurrentCsv == null) return;
        if (string.IsNullOrWhiteSpace(csvName))
        {
            csvName = "N/A";
        }

        var operationResult = Runner.AddRows(csv.CsvContent);
        if (operationResult.Success)
        {
            var index = _addedCsvsWithEditIndexAdded.IndexOf(x => x.IndexAdded == Runner.CurrentIndex && x.EditIndexAdded == Runner.CurrentRowEditIndex - 1);
            if (index >= 0)
            {
                _addedCsvsWithEditIndexAdded.RemoveAt(index);
            }
            _addedCsvsWithEditIndexAdded.Add((csvName, csv.RowCount(), Runner.CurrentIndex!,  Runner.CurrentRowEditIndex!.Value - 1));
            await InvokeStateHasChangeAndWait();
            await CsvProcessingTable!.InvokeStateHasChanged();
            if (UseSnackBar)
            {
                Snackbar?.Add(operationResult.Message, Severity.Success);
            }
        }
        else if (UseSnackBar)
        {
            Snackbar?.Add(operationResult.Message, Severity.Error);
        }
    }

    private void CheckAddedCsvsAfterEdit() 
    {
        if (Runner?.CurrentCsv == null) return;
        // Before Operation (Edge Case)
        // AddedCsvs: ("fileName1", 1), ("fileName3", 3)
        // Current Index: 2, Max Index: 5

        // After Operation (Edge Case)
        // AddedCsvs: ("fileName1", 1)
        // Current Index: 3, Max Index: 3
        bool anyRemoved = false;
        for (int i = _addedCsvsWithEditIndexAdded.Count-1; i >= 0; i--)
        {
            if (_addedCsvsWithEditIndexAdded[i].IndexAdded == Runner.CurrentIndex &&  _addedCsvsWithEditIndexAdded[i].EditIndexAdded >= Runner.CurrentRowEditIndex - 1)
            {
                _addedCsvsWithEditIndexAdded.RemoveAt(i);
                anyRemoved = true;
            }
        }

        if (anyRemoved)
        {
            StateHasChanged();
        }
    }

    private void CheckAddedCsvsAfterOperation<T>(T operationResult) where T : IOperationResult
    {
        if (Runner == null || !operationResult.Success) return;
        for (int i = _addedCsvsWithEditIndexAdded.Count-1; i >= 0; i--)
        {
            if (_addedCsvsWithEditIndexAdded[i].IndexAdded >= Runner.CurrentIndex)
            {
                _addedCsvsWithEditIndexAdded.RemoveAt(i);
            }
        }
    }

    private void OpenDownloadDialog()
    {
        CsvProcessingTable?.CancelEdit();
        if (_columnsToDownload.Length > 0)
        {
            _columnsToDownload = [];
        }
        if (_searchColumns.Length > 0)
        {
            _searchColumns = [];
        }
        if (_includeTags.Length > 0)
        {
            _includeTags = [];
        }
        if (_excludeTags.Length > 0)
        {
            _excludeTags = [];
        }

        _fileName = DefaultDownloadFileName;
        _sq = null;
        _isDownloadDialogVisible = true;
    }
}