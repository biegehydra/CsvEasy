@namespace EasyCsv.Components
@using EasyCsvInternal

<style>
    .csv-processing-download-popup-container {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }
</style>

<ErrorBoundary >
    <ChildContent>
        @if (Runner?.CurrentCsv != null && ProcessingOptions != null)
        {
            <MudText Typo="Typo.h5">Current Step: @(Runner.CurrentIndex + 1)</MudText>
            <br />
            <div style="display: flex; flex-direction: row; justify-content: space-between; align-items: baseline;">
                <div style="display: flex; gap: 20px; flex-direction: row;">
                    @if (Runner.IsCacheIndexValid(Runner.CurrentIndex - 1))
                    {
                        <MudButton OnClick="_ => GoBackStep()" Variant="Variant.Filled" Color="Color.Secondary">Go Back Step</MudButton>
                    }
                    @if (Runner.IsCacheIndexValid(Runner.CurrentIndex + 1))
                    {
                        <MudButton OnClick="_ => GoForwardStep()" Variant="Variant.Filled" Color="Color.Secondary">Go Forward Step</MudButton>
                    }
                </div>
                @if (ShowAddReferenceCsvs)
                {
                    var columnsNames = Runner.CurrentCsv.ColumnNames();
                    <div style="display: flex; flex-direction: row; justify-content: space-between; gap: 20px; align-items: baseline;">
                        @if (columnsNames != null && (columnsNames.Contains(InternalColumnNames.References) || columnsNames.Contains(InternalColumnNames.Tags)))
                        {
                            string text = TagsAndReferencesLocation == ColumnLocation.Beginning ? "Move tags and references columns to end" : "Move tags and references columns to beginning";
                            <MudTooltip Text="@text" Delay="600">
                                <MudIconButton Variant="Variant.Filled" Color="Color.Tertiary" Icon="@Icons.Material.Filled.SwapHoriz"
                                               OnClick="() => TagsAndReferencesLocation = TagsAndReferencesLocation == ColumnLocation.End ? ColumnLocation.Beginning : ColumnLocation.End" />
                            </MudTooltip>
                        }
                        <MudTooltip Text="Download Snapshot of Current Csv" Delay="600">
                            <MudIconButton Variant="Variant.Filled" Color="Color.Info" Icon="@Icons.Material.Filled.Download"
                                           OnClick="_ => OpenDownloadDialog()" />
                        </MudTooltip>
                        <CsvFileInput InputVariant="@FileInputVariant.Button" ButtonText="Add Reference Csv" OnCsvUpload="x => AddReferenceCsv(x)"></CsvFileInput>
                    </div>
                }
            </div>
            <br />
            <br />
            <CsvProcessingTable @ref="_csvProcessingTable" ProcessingOptions="ProcessingOptions" Stepper="this" EasyCsv="Runner.CurrentCsv" />
        }
    </ChildContent>
    <ErrorContent>
        @if (ErrorBoundaryContent == null)
        {
            <MudText Typo="Typo.h3" >Something went wrong</MudText>
        }
        else
        {
            @ErrorBoundaryContent
        }
    </ErrorContent>
</ErrorBoundary>
@{
    string[]? columnNames;
}
@if (Runner?.CurrentCsv != null && (columnNames = Runner.CurrentCsv.ColumnNames()) != null)
{
    <MudDialog @bind-IsVisible="_isDownloadDialogVisible" Style="min-width: 600px;" >
        <DialogContent >
            <CascadingValue TValue="CsvProcessingStepper" Value="this" IsFixed="true">
                <div class="csv-processing-download-popup-container">
                    <MudText Class="mb-2" Typo="Typo.h5"><b>Download Snapshot Options</b></MudText>
                    <MudTextField T="string" DebounceInterval="SearchDebounceInterval" Immediate="true" Required="true" Label="File Name"
                                  HelperText="Name given to downloaded file" HelperTextOnFocus Variant="Variant.Outlined" @bind-Value="_fileName"
                                  Clearable OnClearButtonClick="x => _sq = null"/>
                    <MudText Typo="Typo.h6">Column Filter (Required)</MudText>
                    <MultiColumnSelect @bind-ColumnNames="_columnsToDownload" Label="Columns To Download" SelectAll="true" SelectAllText="Download All Columns"></MultiColumnSelect>
                    <MudText Typo="Typo.h6">Search Filter (Optional)</MudText>
                    <MudTextField T="string" DebounceInterval="SearchDebounceInterval" Immediate="true" Label="Search Query"
                                  HelperText="Value to search for" HelperTextOnFocus Variant="Variant.Outlined" @bind-Value="_sq"
                                  Clearable OnClearButtonClick="x => _sq = null"/>
                    <MultiColumnSelect @bind-ColumnNames="_searchColumns" Label="Columns To Search" SelectAll="true" SelectAllText="Search All Columns"></MultiColumnSelect>
                    @if (columnNames.Contains(InternalColumnNames.Tags))
                    {
                        <MudText Typo="Typo.h6">Tags Filter (Optional)</MudText>
                        <MultiTagSelect @bind-Tags="_includeTags" DisabledTags="_excludeTags" Label="Include Tags"></MultiTagSelect>
                        <MultiTagSelect @bind-Tags="_excludeTags" DisabledTags="_includeTags" Label="Exclude Tags"></MultiTagSelect>
                    }
                </div>
            </CascadingValue>
        </DialogContent>
        <DialogActions>
            <MudButton StartIcon="@Icons.Material.Filled.Close" Variant="Variant.Outlined" Color="Color.Default" OnClick="x => _isDownloadDialogVisible = false"  >Cancel</MudButton>
            <MudButton Disabled="string.IsNullOrWhiteSpace(_fileName)" StartIcon="@Icons.Material.Filled.Download" Variant="Variant.Filled" Color="Color.Info" OnClick="async _ => await DownloadSnapShot()">Download</MudButton>
        </DialogActions>
    </MudDialog>
}
@code {
    private bool _isDownloadDialogVisible = false;
    private string[] _columnsToDownload = [];
    private string[] _searchColumns = [];
    private string[] _includeTags = [];
    private string[] _excludeTags = [];
    private string? _sq;
    private string? _fileName;

    private void OpenDownloadDialog()
    {
        if (_columnsToDownload.Length > 0)
        {
            _columnsToDownload = [];
        }
        if (_searchColumns.Length > 0)
        {
            _searchColumns = [];
        }
        if (_includeTags.Length > 0)
        {
            _includeTags = [];
        }
        if (_excludeTags.Length > 0)
        {
            _excludeTags = [];
        }

        _fileName = DefaultDownloadFileName;
        _sq = null;
        _isDownloadDialogVisible = true;
    }
}