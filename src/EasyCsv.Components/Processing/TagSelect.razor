@namespace EasyCsv.Components
@inherits StrategyBucketItemBase

@if (CsvProcessor?.Runner?.CurrentCsv != null)
{
    @if (!HideNoTags || CsvProcessor.Runner.CurrentTags?.Count > 0)
    {
        <MudSelect Style="min-width: 250px;" Immediate="Immediate" Disabled="Disabled" Label="@Label" T="string" @bind-Value="Tag" Clearable="true" OnClearButtonClick="x => Tag = null"
                   Variant="@Variant">
            @foreach (var value in CsvProcessor.Runner.CurrentTags ?? Enumerable.Empty<string>())
            {
                <MudSelectItem Disabled="DisabledTags != null && DisabledTags.Contains(value)" Value="value">@value</MudSelectItem>
            }
        </MudSelect>
    }
}

@code {
    [Parameter] public EventCallback<string> TagChanged { get; set; }
    private string? _tag;
    [Parameter]
    public string? Tag
    {
        get => _tag;
        set
        {
            if (value == null)
            {
                if (_tag != null)
                {
                    _tag = value;
                    TagChanged.InvokeAsync(value);
                }
                return;
            }
            if (_tag?.Equals(value) == true)
            {
                return;
            }
            _tag = value;
            TagChanged.InvokeAsync(value);
        }
    }
    [Parameter] public string[]? DisabledTags { get; set; }
    [Parameter] public bool Immediate { get; set; } = true;
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public string Label { get; set; } = "Column Names";
    [Parameter] public bool SelectAll { get; set; }
    [Parameter] public Variant Variant { get; set; } = Variant.Outlined;
    [Parameter] public string? SelectAllText { get; set; }
    [Parameter] public bool HideNoTags { get; set; }
    [Parameter] public Func<ICollection<string>, string?>? AutoMatchTag { get; set; }
    protected override void OnInitialized()
    {
        if (AutoMatchTag != null)
        {
            var tags = CsvProcessor.Runner?.CurrentTags;
            if (tags?.Count > 0 && AutoMatchTag(tags) is { } matchedTag && tags.Contains(matchedTag))
            {
                Tag = matchedTag;
            }
        }
    }
}

