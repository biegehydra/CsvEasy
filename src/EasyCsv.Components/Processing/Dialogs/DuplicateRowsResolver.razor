@using EasyCsv.Components.Processing.Dialogs
<style>
    .dedupe-table-easy-csv .mud-table-container {
        max-height: 500px;
    }
</style>
<MudDialog Style="min-width: 1000px;" @bind-Visible="IsVisible" Class="csv-processing-resolve-duplicates-popup" Options="_dialogOptions">
    <TitleContent>
        <div style="display: flex; flex-direction: row; gap: 10px; justify-content: space-between;" >
            <MudText Class="mb-2" Typo="Typo.h5"><b>Duplicate Resolver</b></MudText>
            <MudIconButton Icon="@Icons.Material.Filled.Close" OnClick="OnCancel"></MudIconButton>
        </div>
    </TitleContent>
    <DialogContent>
        @if (DuplicateGroup?.Duplicates.Any() == true)
        {
            <MudText Class="mb-3" Typo="Typo.h5" Style="margin-top: -15px;">
                Found @DuplicateGroup.Value.Duplicates.Length duplicates with value '<b>@DuplicateValue</b>'
                @if (!string.IsNullOrWhiteSpace(ColumnName))
                {
                    @:&nbsp;in&nbsp;'
                    <b>@ColumnName</b>@:'
                }
            </MudText>
            <MudText Class="mb-3" Typo="Typo.h6" Style="font-weight: 800;">Select the rows you would like to keep:</MudText>
            @ExampleCsvInternal(DuplicateGroup.Value.Duplicates)
        }
    </DialogContent>
    <DialogActions>
        <MudButton Disabled="_completed" StartIcon="@Icons.Material.Filled.Close" Variant="Variant.Outlined" Color="Color.Default" OnClick="Cancel">Abort Dedupe</MudButton>
        <MudTooltip RootClass="ml-3" Text="All other rows will be deleted">
            @{
                bool disabled = MultiSelect
                    ? _completed || (MustSelectRow && _selectedCsvRows.Count == 0)
                    : _completed || (MustSelectRow && _selectedCsvRow == null);
                string text = MultiSelect
                    ? "Confirm Rows To Keep"
                    : "Select This Row To Keep";
            }
            <MudButton Disabled="@disabled" StartIcon="@Icons.Material.Filled.Download" Variant="Variant.Filled" Color="Color.Info" OnClick="Submit">@text</MudButton>
        </MudTooltip>
    </DialogActions>
</MudDialog>

@code {
    [Inject] private IDialogService? DialogService { get; set; }

    private DuplicateGrouping? _submittingGroup;
    private DuplicateGrouping? _duplicateGroup;
    [Parameter]
    public DuplicateGrouping? DuplicateGroup
    {
        get => _duplicateGroup;
        set
        {
            if (_submitting)
            {
                _submittingGroup = value;
                return;
            }
            _duplicateGroup = value;
            if (value != null)
            {
                Reset();
                _completed = false;
                if (value.Value.Duplicates.Length == 0) return;
                switch (AutoSelectRow, AutoSelectRows, MultiSelect)
                {
                    case (_, not null, true):
                        _selectedCsvRows = AutoSelectRows(value.Value.Duplicates.Select(x => x.Item2).ToArray())?.Select(x => (-1, x)).ToHashSet() ?? new HashSet<(int, CsvRow)>();
                        return;
                    case (not null, _, false):
                        _selectedCsvRow = AutoSelectRow(value.Value.Duplicates.Select(x => x.Item2).ToArray());
                        return;

                }
                switch ((ResolveDuplicatesAutoSelect, MultiSelect))
                {
                    case (ResolveDuplicatesAutoSelect.FirstRow, false):
                        _selectedCsvRow = value.Value.Duplicates[0].Item2;
                        _selectedCsvRowIndex = value.Value.Duplicates[0].Item1;
                        break;
                    case (ResolveDuplicatesAutoSelect.FirstRow, true):
                        _selectedCsvRows.Add(value.Value.Duplicates[0]);
                        break;
                }
            }
        }
    }
    [Parameter] public ResolveDuplicatesAutoSelect ResolveDuplicatesAutoSelect { get; set; } = ResolveDuplicatesAutoSelect.None;
    [Parameter] public CsvProcessingStepper Stepper { get; set; } = null!;
    [Parameter] public Func<CsvRow[], CsvRow?>? AutoSelectRow { get; set; }
    [Parameter] public Func<CsvRow[], CsvRow[]?>? AutoSelectRows { get; set; }
    [Parameter] public bool MustSelectRow { get; set; }
    [Parameter] public bool MultiSelect { get; set; }
    [Parameter] public string? ColumnName { get; set; }
    [Parameter] public string? DuplicateValue { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter]
    public bool IsVisible
    {
        get => _isVisible;
        set
        {
            if (_isVisible != value)
            {
                _isVisible = value;
                IsVisibleChanged.InvokeAsync(value);
            }
        }
    }
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }

    [Parameter] public EventCallback<MultiDuplicateRootPickerResult> MultiComplete { get; set; }
    [Parameter] public EventCallback<DuplicateRootPickerResult> SingleComplete { get; set; }
    private bool _completed;
    private bool _isVisible;

    private void Reset()
    {
        _selectedCsvRow = null;
        _selectedCsvRowIndex = null;
        _selectedCsvRows.Clear();
    }

    private static DialogOptions _dialogOptions = new DialogOptions()
    {
        CloseButton = false,
        CloseOnEscapeKey = false,
        BackdropClick = false
    };

    private async Task Cancel()
    {
        _completed = false;
        Reset();
        IsVisible = false;
        await OnCancel.InvokeAsync();
    }


    private bool _submitting;
    private async Task Submit()
    {
        var userConfirmation = await GetUserConfirmationIfNoneSelect();
        if (!userConfirmation) return;
        _completed = true;
        await InvokeAsync(StateHasChanged);
        await Task.Delay(5);
        _submitting = true;
        try
        {
            if (MultiSelect)
            {
                await MultiComplete.InvokeAsync(new MultiDuplicateRootPickerResult(_selectedCsvRows.ToHashSet()));
            }
            else
            {
                await SingleComplete.InvokeAsync(new DuplicateRootPickerResult(_selectedCsvRow, _selectedCsvRowIndex));
            }
            Reset();
            _submitting = false;
            if (_submittingGroup != null)
            {
                DuplicateGroup = _submittingGroup;
            }
        }
        finally
        {
            _submitting = false;
        }
    }

    private async Task<bool> GetUserConfirmationIfNoneSelect()
    {
        if (DialogService == null) return true;
        switch (MultiSelect)
        {
            case true when _selectedCsvRows.Count > 0:
                return true;
            case false when _selectedCsvRow != null:
                return true;
        }
        var parameters = new DialogParameters<ConfirmDialog>()
        {
            {x => x.ContentText, $"Are you sure you'd like to remove ALL {DuplicateGroup?.Duplicates.Length} duplicates?"},
            {x => x.ButtonText, "Confirm"},
            {x => x.Color, Color.Info}
        };
        string text = MultiSelect ? "No rows selected" : "No row selected";
        var dialog = await DialogService.ShowAsync<ConfirmDialog>(text, parameters);
        var result = await dialog.Result;
        return result.Data is true;
    }


    private CsvRow? _selectedCsvRow;
    private int? _selectedCsvRowIndex;

    private void SelectRowSingle(CsvRow row, int rowIndex)
    {
        if (_selectedCsvRow == null || _selectedCsvRow != row)
        {
            _selectedCsvRow = row;
            _selectedCsvRowIndex = rowIndex;
        }
        else if (_selectedCsvRow == row)
        {
            _selectedCsvRow = null;
            _selectedCsvRowIndex = rowIndex;
        }
    }

    private HashSet<(int, CsvRow)> _selectedCsvRows = new();
    private void SelectRowMultiple(CsvRow row, int rowIndex)
    {
        var record = (rowIndex, row);
        if (!_selectedCsvRows.Add(record))
        {
            _selectedCsvRows.Remove(record);
        }
    }

    private RenderFragment? ExampleCsvInternal((int, CsvRow)[] exampleCsv)
    {
        if (exampleCsv?.Length > 0 != true) return null;
        int tagsColumnIndex = exampleCsv[0].Item2.Keys.IndexOf(InternalColumnNames.Tags);
        int referencesColumnIndex = exampleCsv[0].Item2.Keys.IndexOf(InternalColumnNames.References);
        var tagColors = new Dictionary<string, Color>();

        void AddTag(string tag)
        {
            if (!tagColors.ContainsKey(tag))
            {
                int colorIndex = tagColors.Count % CsvProcessingTable.DefaultColors.Length;
                Color color = CsvProcessingTable.DefaultColors[colorIndex];
                tagColors.Add(tag, color);
            }
        }

        return @<text>
                    <MudTable Class="dedupe-table-easy-csv" Items="exampleCsv" RowsPerPage="10" FixedHeader="true" Hover Striped Bordered Elevation="3">
                        <HeaderContent>
                            <MudTh>Keep</MudTh>
                            @foreach (var key in exampleCsv[0].Item2.Keys.Where(x => x != InternalColumnNames.Tags && x != InternalColumnNames.References))
                            {
                                <MudTh>@key</MudTh>
                            }
                            @if (tagsColumnIndex >= 0)
                            {
                                <MudTh>Tags</MudTh>
                            }
                        </HeaderContent>
                        <RowTemplate Context="row">
                            @{
                                int i = -1;
                            }
                            @if (MultiSelect) 
                            {
                                <MudTd>
                                    <MudCheckBox T="bool" Disabled="_completed" Value="_selectedCsvRows.Contains(row)" ValueChanged="x => SelectRowMultiple(row.Item2, row.Item1)"></MudCheckBox>
                                </MudTd>
                            }
                            else 
                            {
                                <MudTd>
                                    <MudCheckBox T="bool" Disabled="_completed || (_selectedCsvRow != null && _selectedCsvRow != row.Item2)" Value="_selectedCsvRow == row.Item2" ValueChanged="x => SelectRowSingle(row.Item2, row.Item1)"></MudCheckBox>
                                </MudTd>
                            }
                            @foreach (var (_, value) in row.Item2)
                            {
                                i++;
                                if (i != tagsColumnIndex && i != referencesColumnIndex)
                                {
                                    <MudTd>@value</MudTd>
                                }
                            }
                            @if (tagsColumnIndex >= 0)
                            {
                                var tags = row.Item2.ValueAt(tagsColumnIndex)?.ToString()?.Split(",", StringSplitOptions.TrimEntries | StringSplitOptions.RemoveEmptyEntries);
                                <MudTd Class="extra-dense">
                                    @if (tags?.Any() == true)
                                    {
                                        <MudChipSet T="string" >
                                            @foreach (var tag in tags)
                                            {
                                                AddTag(tag);
                                                <MudChip T="string"  Text="@tag" Color="tagColors[tag]" Size="Size.Small"/>
                                            }
                                        </MudChipSet>
                                    }
                                </MudTd>
                            }
                        </RowTemplate>
                        <PagerContent>
                            <MudTablePager></MudTablePager>
                        </PagerContent>
                    </MudTable>
                </text>;
    }
}