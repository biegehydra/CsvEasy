<style>
    .dedupe-table-easy-csv .mud-table-container {
        max-height: 500px;
    }
</style>
<MudDialog Style="min-width: 1000px;">
    <TitleContent>
        <MudText Class="mb-2" Typo="Typo.h5"><b>@TitleText</b></MudText>
    </TitleContent>
    <DialogContent>
        @if (DuplicateGroup?.Duplicates.Any() == true)
        {
            foreach (var duplicateGroup in DuplicateGroup?.Duplicates!)
            {
                var dictionaryArray = duplicateGroup.Item2.Select(x => x.Item2).ToArray();
                string fileNameStr = duplicateGroup.Item1 is > 0 && Utils.IsValidIndex(duplicateGroup.Item1.Value, Stepper?.Runner?.ReferenceCsvs?.Count ?? -1)
                ? Stepper!.Runner!.ReferenceCsvs![duplicateGroup.Item1.Value].FileName : "Working Csv";
                <MudText Class="mb-3" Typo="Typo.h5">Duplicates with value: '@DuplicateValue'</MudText>
                @ExampleCsvInternal(dictionaryArray, $"{duplicateGroup.Item2.Length} in {fileNameStr}", duplicateGroup.Item1)
            }
        }
    </DialogContent>
    <DialogActions>
        <MudTooltip Text="All other rows will be deleted">
            <MudButton Disabled="_completed" StartIcon="@Icons.Material.Filled.Close" Variant="Variant.Outlined" Color="Color.Default" OnClick="x => Cancel()">Abort Dedupe</MudButton>
            <MudButton Disabled="_completed || (MustSelectRow && _selectedCsvRows.Count == 0)" StartIcon="@Icons.Material.Filled.Download" Variant="Variant.Filled" Color="Color.Info" OnClick="Submit">Confirm Rows To Keep</MudButton>
        </MudTooltip>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public DuplicateGrouping? DuplicateGroup { get; set; }
    [Parameter] public CsvProcessingStepper Stepper { get; set; } = null!;
    [Parameter] public bool MustSelectRow { get; set; }
    [Parameter] public string? TitleText { get; set; }
    [Parameter] public string? DuplicateValue { get; set; }
    private readonly HashSet<(CsvRow, int?)> _selectedCsvRows = new();
    private bool _completed;

    private void SelectRow(CsvRow row, int? referenceCsvId)
    {
        var record = (row, referenceCsvId);
        if (!_selectedCsvRows.Add(record))
        {
            _selectedCsvRows.Remove(record);
        }
    }
    async Task Submit()
    {
        _completed = true;
        await InvokeAsync(StateHasChanged);
        await Task.Delay(5);
        MudDialog.Close(DialogResult.Ok(new MultiDuplicateRootPickerResult(_selectedCsvRows.ToHashSet())));
    }

    void Cancel() => MudDialog.Cancel();


    private RenderFragment? ExampleCsvInternal(CsvRow[] exampleCsv, string text, int? referenceCsvId)
    {
        if (exampleCsv?.Length > 0 != true) return null;
        int tagsColumnIndex = exampleCsv[0].Keys.IndexOf(InternalColumnNames.Tags);
        int referencesColumnIndex = exampleCsv[0].Keys.IndexOf(InternalColumnNames.References);
        var tagColors = new Dictionary<string, Color>();

        void AddTag(string tag)
        {
            if (!tagColors.ContainsKey(tag))
            {
                int colorIndex = tagColors.Count % CsvProcessingTable.DefaultColors.Length;
                Color color = CsvProcessingTable.DefaultColors[colorIndex];
                tagColors.Add(tag, color);
            }
        }

        return @<text>
                    <MudText Class="mb-3" Typo="Typo.h5">@text</MudText>
                    <MudTable Class="dedupe-table-easy-csv" Items="exampleCsv" RowsPerPage="10" FixedHeader="true" Header="500px" Hover Striped Bordered Elevation="3">
                        <HeaderContent>
                            <MudTh>Keep</MudTh>
                            @foreach (var key in exampleCsv[0].Keys.Where(x => x != InternalColumnNames.Tags && x != InternalColumnNames.References))
                            {
                                <MudTh>@key</MudTh>
                            }
                            @if (tagsColumnIndex >= 0)
                            {
                                <MudTh>Tags</MudTh>
                            }
                        </HeaderContent>
                        <RowTemplate Context="row">
                            @{
                                int i = -1;
                            }
                            <MudTd>
                                <MudCheckBox T="bool" Disabled="_completed" Value="_selectedCsvRows.Contains((row, referenceCsvId))" ValueChanged="x => SelectRow(row, referenceCsvId)"></MudCheckBox>
                            </MudTd>
                            @foreach (var (_, value) in row)
                            {
                                i++;
                                if (i != tagsColumnIndex && i != referencesColumnIndex)
                                {
                                    <MudTd>@value</MudTd>
                                }
                            }
                            @if (tagsColumnIndex >= 0)
                            {
                                var tags = row.ValueAt(tagsColumnIndex)?.ToString()?.Split(",", StringSplitOptions.TrimEntries | StringSplitOptions.RemoveEmptyEntries);
                                <MudTd Class="extra-dense">
                                    @if (tags?.Any() == true)
                                    {
                                        <MudChipSet>
                                            @foreach (var tag in tags)
                                            {
                                                AddTag(tag);
                                                <MudChip Text="@tag" Color="tagColors[tag]" Size="Size.Small"/>
                                            }
                                        </MudChipSet>
                                    }
                                </MudTd>
                            }
                        </RowTemplate>
                        <PagerContent>
                            <MudTablePager></MudTablePager>
                        </PagerContent>
                    </MudTable>
                </text>;
    }
}
