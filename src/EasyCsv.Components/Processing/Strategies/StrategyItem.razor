@namespace EasyCsv.Components
@implements IDisposable
@inherits StrategyItemBase
<style>
    .example-all-options-container {
        display: flex;
        flex-direction: column;
        align-items: baseline;
    }
    .strategy-example-tooltip {
        margin-bottom: -6px;
    }
    .example-options-container {
        display: flex;
        font-size: x-large;
    }
    .example-options-key {
        color: cornflowerblue;
    }
    .example-options-value {
        color: red;
    }
    .easy-csv-fullscreen-backdrop {
        position: fixed;
        top: 0 !important;
        left: 0 !important;
        right: 0 !important;
        bottom: 0 !important;
        z-index: 1000; /* This should be lower than the popover's z-index but higher than most other elements on your page */
        background-color: rgba(0, 0, 0, 0); /* You can adjust the opacity as needed */
    }
</style>
@if (!string.IsNullOrWhiteSpace(DisplayName) && (IsSelected || StrategyBucket.MatchesSearchQuery(this)) && (!CsvProcessor.HideOtherStrategiesOnSelect || !StrategyBucket.IsOtherStrategySelected(this)))
{
    @if (Options != null)
    {
        <MudListItem @bind-Expanded="_expanded" >
            <ChildContent>
                @MudListItemChildContent()
            </ChildContent>
            <NestedList>
                @Options(!IsSelected)
            </NestedList>
        </MudListItem>
    }
    else
    {
        <MudListItem @bind-Expanded="_expanded" Text="@DisplayName">
            <ChildContent>
                @MudListItemChildContent()
            </ChildContent>
        </MudListItem>
    }
}

@code {
    private bool _expanded;
    private bool _open;
    private bool _backDropOpen;
    public bool IsSelected { get; private set; }
    private bool _allowRun = true;

    [Parameter] public bool AllowRun
    {
        get => _allowRun;
        set
        {
            if (value != _allowRun)
            {
                _allowRun = value;
                AllowRunChanged.InvokeAsync(_allowRun);
#pragma warning disable CS4014
                StrategyBucket?.OnAllowRunChanged();
#pragma warning restore CS4014 
            }
        }
    }
    [Parameter] public EventCallback<bool> AllowRunChanged { get; set; }
    [Parameter] public override string? DisplayName { get; set; }
    [Parameter] public override string? DescriptionStr { get; set; }
    [Parameter] public override RenderFragment? Description { get; set; }
    [Parameter] public IReadOnlyDictionary<string, string>? ExampleOptions { get; set; }
    [Parameter] public IReadOnlyList<IReadOnlyDictionary<string, string?>>? ReferenceCsvExample { get; set; }
    [Parameter] public IReadOnlyList<IReadOnlyDictionary<string, string?>>? BeforeCsvExample { get; set; }
    [Parameter] public IReadOnlyList<IReadOnlyDictionary<string, string?>>? AfterCsvExample { get; set; }
    [Parameter] public EventCallback<string> StrategyPicked { get; set; }
    [Parameter] public RenderFragment<bool>? Options { get; set; }
    [Parameter] public RenderFragment<IReadOnlyDictionary<string, string?>?>? DisplayOptions { get; set; }
    [Parameter] public RenderFragment<IReadOnlyList<IReadOnlyDictionary<string, string?>>?>? DisplayReferenceCsv { get; set; }
    [Parameter] public RenderFragment<IReadOnlyList<IReadOnlyDictionary<string, string?>>?>? DisplayBeforeCsv { get; set; }
    [Parameter] public RenderFragment<IReadOnlyList<IReadOnlyDictionary<string, string?>>?>? DisplayAfterCsv { get; set; }

    protected override void OnInitialized()
    {
        StrategyBucket?.Add(this);
    }

    internal Task InvokeStateHasChanged()
    {
        return InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        StrategyBucket?.Remove(this);
    }

#pragma warning disable CS4014 // Because this call is not awaited, execution of the current method continues before the call is completed
    private Task SelectedChanged(bool value)
    {
        if (value == false)
        {
            if (!IsSelected) return Task.CompletedTask;
            if (CsvProcessor.AutoControlExpandOptionsOnSelect)
            {
                AutoUpdateExpandAfterShortDelay(false);
            }
            IsSelected = false;
            return StrategyBucket.OnSelectedChanged(this);
        }
        else if (!IsSelected && !StrategyBucket.IsOtherStrategySelected(this))
        {
            IsSelected = true;
            if (CsvProcessor.AutoControlExpandOptionsOnSelect)
            {
                AutoUpdateExpandAfterShortDelay(true);
            }
            return StrategyBucket.OnSelectedChanged(this);
        }
        return Task.CompletedTask;
    }
#pragma warning restore CS4014 // Because this call is not awaited, execution of the current method continues before the call is completed

    private async Task AutoUpdateExpandAfterShortDelay(bool newValue)
    {
        await Task.Delay(25);
        if (_expanded != newValue)
        {
            _expanded = newValue;
            await InvokeStateHasChanged();
        }
    }

    private RenderFragment? MudListItemChildContent()
    {
        return @<div style="display: flex; flex-direction: row; align-items: center; gap: 15px;">
                   <MudCheckBox T="bool" Disabled="StrategyBucket.IsOtherStrategySelected(this)"  Value="IsSelected" ValueChanged="SelectedChanged"></MudCheckBox>
                   @DisplayName
                   @if (!string.IsNullOrWhiteSpace(DescriptionStr) || Description != null || ReferenceCsvExample != null || 
                                                                   BeforeCsvExample != null || AfterCsvExample != null || 
                                                                   ExampleOptions != null)   
                   {
                       <MudTooltip Delay="750"  Style="padding: 10px; max-width: 600px;" RootClass="strategy-example-tooltip">
                           <TooltipContent>
                               <RenderDelay Delay="750" DelayComplete="() => { _open = true; StateHasChanged(); }" ></RenderDelay>
                           </TooltipContent>
                           <ChildContent>
                               <MudIcon Icon="@Icons.Material.Filled.Info"></MudIcon>
                           </ChildContent>
                       </MudTooltip>
                       <MudPopover @onclick="() => { _backDropOpen = false; _open = false; }" Class="easy-csv-fullscreen-backdrop" Open="_open" >
                           <ChildContent>
                               @{
                                   @if (_backDropOpen != true)
                                   {
                                       _backDropOpen = true;
                                       StateHasChanged();
                                   }
                               }
                           </ChildContent>
                       </MudPopover>
                       <MudPopover Style="color: var(--mud-palette-dark-text);
                                          background-color: var(--mud-palette-grey-darker);
                                          padding: 10px; max-width: 600px;" Open="_backDropOpen" >
                           <ChildContent>
                               @if (Description != null)
                               {
                                   @Description
                               }
                               else if (!string.IsNullOrWhiteSpace(DescriptionStr))
                               {
                                   <MudText Typo="Typo.h6">@DescriptionStr</MudText>
                               }
                               @if (DisplayOptions != null)
                               {
                                   @DisplayOptions(ExampleOptions)
                               }
                               else
                               {
                                   @ExampleOptionsFragment(ExampleOptions)
                               }
                               @if (DisplayReferenceCsv != null)
                               {
                                   @DisplayReferenceCsv(ReferenceCsvExample)
                               }
                               else
                               {
                                   @ExampleCsv(ReferenceCsvExample, "Reference Csv")
                               }
                               @if (DisplayBeforeCsv != null)
                               {
                                   @DisplayBeforeCsv(AfterCsvExample)
                               }
                               else
                               {
                                   @ExampleCsv(BeforeCsvExample, "Before Operation")
                               }
                               @if (DisplayAfterCsv != null)
                               {
                                   @DisplayAfterCsv(AfterCsvExample)
                               }
                               else
                               {
                                   @ExampleCsv(AfterCsvExample, "After Operation")
                               }
                           </ChildContent>
                       </MudPopover>
                   }
               </div>;
    }

    private static RenderFragment? ExampleOptionsFragment(IReadOnlyDictionary<string, string>? options)
    {
        if (options?.Count > 0 != true) return null;
        return @<text>
                    <br/>
                    <MudText Class="mb-3" Typo="Typo.h5">Options Used</MudText>
                    <div class="example-all-options-container" >
                        @foreach (var (key, value) in options)
                        {
                            <div class="example-options-container">
                                <div class="example-options-key">@key</div>
                                <span>:&nbsp;</span>
                                <div class="example-options-value">@value</div>
                            </div>
                        }
                    </div>
                </text>;
    }
}
