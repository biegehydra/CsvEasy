@namespace EasyCsv.Components
@implements IDisposable
@inherits EasyCsvStrategyOptionsBase
@using EasyCsv.Components.Processing
@if (!string.IsNullOrWhiteSpace(DisplayName) && (!CsvProcessor.HideOtherStrategiesOnSelect || !StrategyBucket.IsOtherStrategySelected(this)))
{
    @if (Options != null)
    {
        <MudListItem Text="@DisplayName">
            <ChildContent>
                <div style="display: flex; flex-direction: row; align-items: center; gap: 15px;">
                    <MudCheckBox T="bool" Disabled="StrategyBucket.IsOtherStrategySelected(this)"  Value="IsSelected" ValueChanged="SelectedChanged"></MudCheckBox>
                    @DisplayName
                </div>
            </ChildContent>
            <NestedList>
                @Options(!IsSelected)
            </NestedList>
        </MudListItem>
    }
    else
    {
        <MudListItem Text="@DisplayName">
            <ChildContent>
                <div style="display: flex; flex-direction: row; align-items: center; gap: 15px;">
                    <MudCheckBox T="bool" Disabled="StrategyBucket.IsOtherStrategySelected(this)"  Value="IsSelected" ValueChanged="SelectedChanged"></MudCheckBox>
                    @DisplayName
                </div>
            </ChildContent>
        </MudListItem>
    }
}

@code {

    public bool IsSelected { get; private set; }
    private bool _allowRun = true;

    [Parameter] public bool AllowRun
    {
        get => _allowRun;
        set
        {
            if (value != _allowRun)
            {
                _allowRun = value;
                AllowRunChanged.InvokeAsync(_allowRun);
#pragma warning disable CS4014
                StrategyBucket?.OnAllowRunChanged();
#pragma warning restore CS4014 
            }
        }
    }
    [Parameter] public EventCallback<bool> AllowRunChanged { get; set; }
    [Parameter] public string? DisplayName { get; set; }
    [Parameter] public string? Description { get; set; }
    [Parameter] public IReadOnlyDictionary<string, string>? BeforeColumns { get; set; }
    [Parameter] public IReadOnlyDictionary<string, string>? AfterColumns { get; set; }
    [Parameter] public EventCallback<string> StrategyPicked { get; set; }
    [Parameter] public RenderFragment<bool>? Options { get; set; }

    protected override void OnInitialized()
    {
        StrategyBucket?.Add(this);
    }

    internal Task InvokeStateHasChanged()
    {
        return InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        StrategyBucket?.Remove(this);
    }

    private Task SelectedChanged(bool value)
    {
        if (value == false)
        {
            IsSelected = false;
            return StrategyBucket.OnSelectedChanged(this);
        }
        if (!StrategyBucket.IsOtherStrategySelected(this))
        {
            IsSelected = true;
            return StrategyBucket.OnSelectedChanged(this);
        }
        return Task.CompletedTask;
    }
}
