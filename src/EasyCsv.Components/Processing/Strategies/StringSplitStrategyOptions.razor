@namespace EasyCsv.Components
@if (CsvProcessor == null)
{
    throw new ArgumentException("EasyCsv: Attempted to render strategy options not within CsvProcessingStepper", nameof(CsvProcessingStepper));
}
<StrategyItem DisplayName="String Split" Description="Splits values in a column on a specified delimiter into new columns." BeforeCsvExample="BeforeExample" AfterCsvExample="AfterExample" AllowRun="AllowRun" StrategyPicked="SplitPicked">
    <Options>
        <MudListItem>
            <MudTextField Disabled="context" Immediate="Immediate" Placeholder="Delimiter" Variant="Variant.Outlined" @bind-Value="_delimiter"></MudTextField>
        </MudListItem>
        <MudListItem>
            <MudTextField Disabled="context" Immediate="Immediate" Placeholder="New Column Names" Variant="Variant.Outlined" @bind-Value="_newColumnNames"></MudTextField>
        </MudListItem>
        <MudListItem>
            <MudCheckBox Disabled="context" Label="Remove Split Column" @bind-Value="_removeSplitColumn"></MudCheckBox>
        </MudListItem>
    </Options>
</StrategyItem>

@code
{
    [CascadingParameter] public CsvProcessingStepper CsvProcessor { get; set; } = null!;
    [Parameter] public bool Immediate { get; set; } = true;
    private bool AllowRun => _newColumnNames?.Contains(',') == true && !string.IsNullOrWhiteSpace(_delimiter);
    private static Dictionary<string, string>[] BeforeExample { get; set; } =
    [
        new Dictionary<string, string>()
        {
            {"Column1", "value1"},
            {"ColumnToSplit", "value2,value3"},
        },
    ];
    private static Dictionary<string, string>[] AfterExample { get; set; } =
    [
        new Dictionary<string, string>()
        {
            {"Column1", "value1"},
            {"Part1", "value2"},
            {"Part2", "value3"},
        },
    ];

    private string? _newColumnNames;
    private string? _delimiter;
    private bool _removeSplitColumn;
    private async Task SplitPicked(string columnName)
    {
        if (!AllowRun) return;
        var splitParsingStrategy = new StringSplitColumnStrategy(columnName, _newColumnNames!.Split(','), _delimiter!, _removeSplitColumn);
        _ = await CsvProcessor.PerformCsvStrategy(splitParsingStrategy);
    }
}
