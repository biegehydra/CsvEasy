@namespace EasyCsv.Components
@using EasyCsv.Components.Processing
@inherits StrategyItemBase

@if (CsvProcessor == null)
{
    throw new ArgumentException("EasyCsv: Attempted to render strategy options not within CsvProcessingStepper", nameof(CsvProcessingStepper));
}
<StrategyItem DisplayName="@DisplayName" DescriptionStr="@DescriptionStr" Description="Description" AllowRun="AllowRun" StrategyPicked="DivideAndReplicate">
    <Options>
        <MudListItem T="string" >
            <ReferenceCsvSelect  Immediate="@Immediate" Disabled="context" @bind-ReferenceCsvId="_referenceCsvId"></ReferenceCsvSelect>
        </MudListItem>
        <MudListItem T="string" >
            <ReferenceColumnSelect ReferenceCsvId="_referenceCsvId" Immediate="@Immediate" Disabled="context" @bind-ReferenceColumnName="_referenceColumnName"></ReferenceColumnSelect>
        </MudListItem>
        <MudListItem T="string" >
            <MudTextField T="string" Label="Tag to Add" Immediate="@Immediate" Variant="Variant.Outlined" Disabled="context" @bind-Value="_tagToAdd"></MudTextField>
        </MudListItem>
    </Options>
</StrategyItem>

@code
{
    [Inject] public ISnackbar? Snackbar { get; set; }
    [Parameter] public override string? DisplayName { get; set; } = "Reference Compare And Tag";
    [Parameter] public override string? DescriptionStr { get; set; } = "Will compare all the values in $column_name in the Working Csv to all the values in the selected column of the reference csv. On any exact matches, the specified tag will be added to the row, and a link to the reference table will be created.";
    [Parameter] public override RenderFragment<string>? Description { get; set; }
    [Parameter] public bool Immediate { get; set; } = true;
    [Parameter] public bool Indeterminate { get; set; } = true;

    private bool AllowRun => !string.IsNullOrWhiteSpace(StrategyBucket.ColumnName) && !string.IsNullOrWhiteSpace(_referenceColumnName) && _referenceCsvId is >= 0;
    private string? _referenceColumnName;
    private int? _referenceCsvId;
    private string? _tagToAdd;

    private async Task DivideAndReplicate(string columnName)
    {
        if (!AllowRun) return;
        if (string.IsNullOrWhiteSpace(StrategyBucket.ColumnName) || string.IsNullOrWhiteSpace(_referenceColumnName) || _referenceCsvId is not >= 0)
        {
            return;
        }
        var progressContext = new OperationProgressContext($"Running {DisplayName}");
        await Snackbar.OpenProgressSnackbar(progressContext, Indeterminate);
        var tagAndReferenceMatchesStrategy = new TagAndReferenceMatchesStrategy(_referenceCsvId.Value, StrategyBucket.ColumnName, _referenceColumnName, _tagToAdd, onProgress: progressContext.ProgressChanged);
        _ = await CsvProcessor.PerformReferenceStrategy(tagAndReferenceMatchesStrategy, progressContext);
    }
}