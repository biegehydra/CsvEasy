<MudTd>
    <MudAutocomplete Immediate="Immediate" Disabled="Disabled" Label="@Label" T="string?" Value="_newValue" ValueChanged="ValueChanged" Clearable="true" OnClearButtonClick="x => ValueChanged(null)"
                     Variant="@Variant" Style="min-width: 250px;" SearchFunc="SearchFunc" ToStringFunc="x => x!" MaxItems="@MaxItems" BeforeItemsTemplate="BeforeItemsTemplate()" >
    </MudAutocomplete>
</MudTd>

@code {
    [Parameter, EditorRequired] public CsvRow Row { get; set; } = null!;
    [Parameter] public string ColumnName { get; set; } = null!;
    [Parameter] public string?[] AllValues { get; set; } = [];
    [Parameter] public bool Immediate { get; set; } = true;
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public int MaxItems { get; set; } = 50;
    [Parameter] public string Label { get; set; } = "Select From All Values";
    [Parameter] public Variant Variant { get; set; } = Variant.Outlined;
    private string? _newValue;
    protected override void OnInitialized()
    {
        if (Row == null || string.IsNullOrWhiteSpace(ColumnName))
        {
            throw new Exception("ProcessingEditTextField: Row and column name cannot be null");
        }
        _newValue = Row[ColumnName]?.ToString();
    }
    private int _itemsInLastQuery;


    private void ValueChanged(string? obj)
    {
        _newValue = obj;
        Row[ColumnName] = _newValue;
    }

    private Task<IEnumerable<string?>> SearchFunc(string? arg)
    {
        _itemsInLastQuery = AllValues.Count(x => !string.IsNullOrWhiteSpace(x) && (arg?.Equals(_newValue) == true || string.IsNullOrWhiteSpace(arg) ||
                                                                             x?.Contains(arg, StringComparison.OrdinalIgnoreCase) == true));
        StateHasChanged();
        return Task.FromResult(AllValues.Where(x => !string.IsNullOrWhiteSpace(x) && (arg?.Equals(_newValue) == true || string.IsNullOrWhiteSpace(arg) ||
                                                                                   x?.Contains(arg, StringComparison.OrdinalIgnoreCase) == true)).Take(50));
    }
    private RenderFragment BeforeItemsTemplate()
    {
        if (_itemsInLastQuery > MaxItems)
        {
            return @<MudAlert Severity="Severity.Info">Showing first @MaxItems of @_itemsInLastQuery items</MudAlert>;
        }
        return null;
    }
}