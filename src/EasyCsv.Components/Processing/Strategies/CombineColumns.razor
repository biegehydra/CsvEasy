@namespace EasyCsv.Components
@inherits StrategyItemBase

@if (CsvProcessor == null || StrategyBucket == null)
{
    throw new ArgumentException("EasyCsv: Attempted to render strategy options not within CsvProcessingStepper", nameof(CsvProcessingStepper));
}
@if (CsvProcessor.CurrentState != null)
{
    <StrategyItem DisplayName="@DisplayName" Description="@Description" ExampleOptions="_exampleOptions" BeforeCsvExample="_beforeExample"
                  AfterCsvExample="_afterExample" AllowRun="AllowRun" StrategyPicked="RunCombineColumns">
        <Options>
            <MudListItem>
                <MudCheckBox Disabled="@context" Label="Remove Joined Columns" @bind-Value="_removeJoinedColumns"></MudCheckBox>
            </MudListItem>
            <MudListItem>
                <MudTextField Disabled="@context" Immediate="Immediate" Required="true" Placeholder="Join Delimiter" Variant="Variant.Outlined" @bind-Value="_delimiter"></MudTextField>
            </MudListItem>
            <MudListItem>
                <MudTextField Disabled="@context" Immediate="Immediate" Required="true" Placeholder="New Column Name" Variant="Variant.Outlined" @bind-Value="_newColumnName"></MudTextField>
            </MudListItem>
            <MudListItem>
                <MultiColumnSelect InitializeWithStrategyBucketColumnName  Disabled="context" @bind-ColumnName="_columnsToJoin"></MultiColumnSelect>
            </MudListItem>
        </Options>
    </StrategyItem>
}

@code
{
    [Parameter] public bool Immediate { get; set; } = true;
    [Parameter] public override string? DisplayName { get; set; } = "Combine Columns";
    [Parameter] public override string? Description { get; set; } = "Combine the specified columns using a delimiter into a new column.";

    private static Dictionary<string, string> _exampleOptions = new ()
    {
        {"RemoveJoinedColumns", "true"},
        {"Join Delimiter", "-"},
        {"New Column Name", "JoinedColumn"}
    };

    private static Dictionary<string, string>[] _beforeExample =
    [
        new Dictionary<string, string>()
        {
            {"ColumnToJoin1", "value1"},
            {"ColumnToJoin2", "value2"},
            {"ColumnToJoin3", "value3"}
        },
    ];
    private static Dictionary<string, string>[] _afterExample =
    [
        new Dictionary<string, string>()
        {
            {"JoinedColumn", "value1-value2-value3"},
        }
    ];

    private bool AllowRun => !string.IsNullOrEmpty(_delimiter) && !string.IsNullOrWhiteSpace(_newColumnName) && _columnsToJoin?.Length > 1;
    private string[]? _columnsToJoin;
    private string? _newColumnName;
    private string? _delimiter;
    private bool _removeJoinedColumns;

    private async Task RunCombineColumns(string columnName)
    {
        if (!AllowRun) return;
        var splitParsingStrategy = new JoinColumnsStrategy(_columnsToJoin!, _newColumnName!, _delimiter!, _removeJoinedColumns);
        _ = await CsvProcessor.PerformCsvStrategy(splitParsingStrategy);
    }
}
