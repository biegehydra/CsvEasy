@namespace EasyCsv.Components
@inherits StrategyItemBase

@if (CsvProcessor == null)
{
    throw new ArgumentException("EasyCsv: Attempted to render strategy options not within CsvProcessingStepper", nameof(CsvProcessingStepper));
}
<StrategyItem DisplayName="@DisplayName" Description="@Description" BeforeCsvExample="BeforeExample" AfterCsvExample="AfterExample" ExampleOptions="ExampleOptions" AllowRun="AllowRun" StrategyPicked="RunDivideAndReplicate">
    <Options>
        <MudListItem>
            <MudTextField Disabled="context" Placeholder="Delimiter" Immediate="true" Variant="Variant.Outlined" @bind-Value="_delimiter"></MudTextField>
        </MudListItem>
    </Options>
</StrategyItem>

@code
{
    [Parameter] public bool Immediate { get; set; } = true;
    [Parameter] public override string? DisplayName { get; set; } = "Divide And Replicate";
    [Parameter] public override string? Description { get; set; } = "Splits the values in a column on a specified delimiter into parts and then creates a copy of the row for each part";

    private static readonly Dictionary<string, string> ExampleOptions = new Dictionary<string, string>()
    {
        {"Delimiter", "-"}
    };
    private static readonly Dictionary<string, string>[] BeforeExample =
    [
        new Dictionary<string, string>()
        {
            {"Column1", "value1"},
            {"ColumnToDivideAndReplicate", "value2-value3"},
        },
    ];
    private static readonly Dictionary<string, string>[] AfterExample =
    [
        new Dictionary<string, string>()
        {
            {"Column1", "value1"},
            {"ColumnToDivideAndReplicate", "value2"},
        },
        new Dictionary<string, string>()
        {
            {"Column1", "value1"},
            {"ColumnToDivideAndReplicate", "value3"},
        }
    ];

    private bool AllowRun => !string.IsNullOrWhiteSpace(_delimiter);
    private string? _delimiter;
    private async Task RunDivideAndReplicate(string columnName)
    {
        if (!AllowRun) return;
        var splitParsingStrategy = new DivideAndReplicateStrategy(columnName, y => y?.ToString()?.Split(_delimiter).Cast<object?>().ToArray());
        _ = await CsvProcessor.PerformCsvStrategy(splitParsingStrategy);
    }
}
