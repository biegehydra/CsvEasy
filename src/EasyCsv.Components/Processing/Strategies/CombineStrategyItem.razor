@namespace EasyCsv.Components

@if (CsvProcessor == null || StrategyBucket == null)
{
    throw new ArgumentException("EasyCsv: Attempted to render strategy options not within CsvProcessingStepper", nameof(CsvProcessingStepper));
}
@if (CsvProcessor.CurrentState != null)
{
    <StrategyItem DisplayName="Combine" Description="Splits column on value" AllowRun="AllowRun" StrategyPicked="DivideAndReplicate">
        <Options>
            <MudListItem>
                <MudCheckBox Label="Remove Joined Columns" @bind-Value="_removeJoinedColumns"></MudCheckBox>
            </MudListItem>
            <MudListItem>
                <MudTextField Required="true" Placeholder="Delimiter" Variant="Variant.Outlined" @bind-Value="_delimiter"></MudTextField>
            </MudListItem>
            <MudListItem>
                <MudTextField Required="true" Placeholder="New Column Name" Variant="Variant.Outlined" @bind-Value="_newColumnName"></MudTextField>
            </MudListItem>
            <MudListItem>
                <MudSelect Label="Columns To Join" T="string" MultiSelection="true" MultiSelectionTextFunc="@(x => string.Join(", ", x))" SelectedValues="_columnsToJoin" SelectedValuesChanged="x => _columnsToJoin = x.ToArray()">
                    @foreach (var value in CsvProcessor.CurrentState.ColumnNames()!)
                    {
                        <MudSelectItem Value="value">@value</MudSelectItem>
                    }
                </MudSelect>
            </MudListItem>
        </Options>
    </StrategyItem>
}

@code
{
    [CascadingParameter] public CsvProcessingStepper CsvProcessor { get; set; } = null!;
    [CascadingParameter] private StrategyBucket StrategyBucket { get; set; } = null!;

    private bool AllowRun => !string.IsNullOrWhiteSpace(_delimiter) && !string.IsNullOrWhiteSpace(_newColumnName) && _columnsToJoin?.Length > 1;
    private string[]? _columnsToJoin;
    private string? _newColumnName;
    private string? _delimiter;
    private bool _removeJoinedColumns;

    protected override void OnParametersSet()
    {
        if (StrategyBucket != null!)
        {
            _columnsToJoin = [StrategyBucket.ColumnName];
        }
    }

    private async Task DivideAndReplicate(string columnName)
    {
        if (!AllowRun) return;
        var splitParsingStrategy = new JoinColumnsStrategy(_columnsToJoin!, _newColumnName!, _delimiter!, _removeJoinedColumns);
        _ = await CsvProcessor.PerformCsvStrategy(splitParsingStrategy);
    }
}
