@using Microsoft.AspNetCore.Components.Forms
@using EasyCsv.Files
@using EasyCsv.Core.Configuration
@using System.Globalization
@using System.Text.RegularExpressions
@using CsvHelper
@using MudBlazor.Utilities
<style>
    .drag-drop-zone {
        display: flex;
        flex-direction: column;
        position: relative;
        align-items: center;
        justify-content: center;
        transition: all .4s;
        min-height: 75px;
        padding: 8px;
        text-align: center;
        background-color: rgb(75 75 80);
        color: white;
    }
    .drag-drop-input {
        position: absolute;
        width: 100%;
        height: 90%;
        cursor: pointer;
        z-index: 2;
    }
    .drag-enter {
        box-shadow: var(--mud-elevation-10);
    }
</style>

<div @onmouseover="@(() => _mouseOver = true)"
     @onmouseleave="@(() => _mouseOver = false)">
    <MudPaper Style="@_style"
              Class="@_class" >
        @if (_loading)
        {
            <MudProgressLinear Indeterminate="true" Size="Size.Large" />
        }
        <div class="align-center justify-center mud-width-full" style="display: flex; flex-direction: column; @(_loading ? "display: none" : null)">
            <InputFile OnChange="OnFileChange" class="drag-drop-input" style="opacity: 0;" accept=".csv" />
            Drop a single csv file here or click to browse 
        </div>
        <MudIcon Style="@(_loading ? "display: none" : null)" Icon="@Icons.Material.Filled.AttachFile"></MudIcon>
        @if (!string.IsNullOrWhiteSpace(FileName) && CsvValid)
        {
            <MudChip Style="@(_loading ? "display: none" : null)" Color="Color.Dark" Text="@FileName" />
        }
    </MudPaper>
</div>

@code {
    [Inject] private ISnackbar? SnackBar { get; set; }
    private bool _loading;
    private bool _mouseOver = false;

    [Parameter]
    public string? Style { get; set; }

    private string _style => new StyleBuilder()
        .AddStyle(Style)
        .AddStyle("min-height", "150px")
        .AddStyle("border: 2px", "solid var(--mud-palette-success)", CsvValid)
        .Build();

    [Parameter]
    public string? Class { get; set; }

    private string _class => new CssBuilder("drag-drop-zone")
        .AddClass("drag-enter", () => _mouseOver)
        .Build();

    /// <summary>
    /// Controls whether the input box will be highlighted with a green border or not.
    /// </summary>
    [Parameter]
    public bool CsvValid { get; set; }

    private string? _fileName;

    [Parameter]
    public string? FileName
    {
        get => _fileName;
        set
        {
            if (_fileName != value)
            {
                _fileName = value;
                FileNameChanged.InvokeAsync(value);
            }
        }
    }

    [Parameter] public EventCallback<string?> FileNameChanged { get; set; }
 
    [Parameter]
    public EventCallback<(IEasyCsv Csv, string FileName)> OnCsvUpload { get; set; }

    [Parameter]
    public EasyCsvConfiguration EasyCsvConfig { get; set; } = new()
    {
        CsvHelperConfig = new(CultureInfo.CurrentCulture)
        {
            HeaderValidated = null,
            MissingFieldFound = null,
            PrepareHeaderForMatch = new PrepareHeaderForMatch(x => Regex.Replace(x.Header, @"\W", "").ToLower(CultureInfo.CurrentCulture)),
            ShouldUseConstructorParameters = x => true,
            GetConstructor = x => x.ClassType.GetConstructors().FirstOrDefault(c => c.GetParameters().Length == 0)
        },
        GiveEmptyHeadersNames = true
    };


    private async Task OnFileChange(InputFileChangeEventArgs args)
    {
        _loading = true;
        await InvokeAsync(StateHasChanged);
        try
        {
            _mouseOver = false;
            var files = args.GetMultipleFiles();
            if (files.Count == 0)
            {
                return;
            }
            if (files.Count > 1)
            {
                SnackBar?.Add($"Only one file can be uploaded at a time", Severity.Error, x => x.VisibleStateDuration = 300);
                return;
            }
            var file = files.FirstOrDefault();
            if (file == null)
            {
                return;
            }

            if (files.Count > 0)
            {
                if (Path.GetExtension(file.Name) != ".csv")
                {
                    SnackBar?.Add($"Only csv files can be uploaded", Severity.Error, x => x.VisibleStateDuration = 300);
                    return;
                }

                _fileName = file.Name;
                await FileNameChanged.InvokeAsync(file.Name);
                var easyCsv = await EasyCsvFileFactory.FromBrowserFileAsync(file, config: EasyCsvConfig);
                if (easyCsv == null)
                {
                    SnackBar?.Add($"Failed to read csv file", Severity.Error, x => x.VisibleStateDuration = 300);
                    return;
                }
                await OnCsvUpload.InvokeAsync((easyCsv, _fileName));
            }
        }
        finally
        {
            _loading = false;
        }
    }
}
