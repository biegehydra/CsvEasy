@namespace EasyCsv.Components.Internal

<style>
    .mud-input-control-input-container:has(.mud-input-outlined) {
        margin-top: 0px !important;
    }
    .extra-dense {
        padding: 2px 10px !important;
    }
    .text-field-margin-fix .mud-input-slot {
        padding-top: 16px !important;
    }
    .csv-processing-table .mud-table-container {
        max-height: 60vh;
    }
    .csv-processing-popover {
        width: 500px;
    }

    .csv-processing-table .mud-toolbar {
        --mud-internal-toolbar-height: 120px !important;
    }
    .csv-processing-table .mud-th {
        border-color: lightgray;
        border-top: 1px;
        border-right: 1px;
        border-bottom: 1px;
        border-style: inset;
    }

    .mud-table-dense.csv-processing-table .mud-tr:first-child:has(.mud-th) {
        border-left: 1px;
    }

    .csv-processing-table-th-name {

    }


    .csv-processing-table-th-button {

    }


    .csv-processing-toolbar {
        display: flex;
        flex-direction: row;
        gap: 16px;
        width: 100%;
        padding: 0 13px;
        justify-content: space-between;
    }

    .csv-processing-toolbar-options {
        display: flex;
        flex-direction: row;
        gap: 16px;
        align-items: baseline;
    }

    .csv-processing-toolbar-atlas {
        
    }

    .csv-processing-toolbar-full-csv-operations-button {

    }
    .csv-processing-toolbar-atlas-item {
        display: flex;
        flex-direction: row;
        align-items: flex-start;
    }

    .csv-processing-toolbar-search-field {
        width: 350px;
    }

    .mud-table-dense th.mud-table-cell.csv-processing-table-th .mud-button-root {
        padding-right: 5px;
    }

    .mud-table-dense th.mud-table-cell.csv-processing-table-th {
        padding-right: 18px;
        padding-left: 7px;
    }

    .csv-processing-popover .mud-nested-list > .mud-list-item {
        padding-right: 25px;
    }
    .easy-csv-fullscreen-backdrop {
        position: fixed;
        top: 0 !important;
        left: 0 !important;
        right: 0 !important;
        bottom: 0 !important;
        z-index: 1000; /* This should be lower than the popover's z-index but higher than most other elements on your page */
        background-color: rgba(0, 0, 0, 0); /* You can adjust the opacity as needed */
    }
</style>

@if (EasyCsv?.CsvContent != null && EasyCsv.ColumnNames() != null && ColumnOptions != null) 
{
    int tagsColumnIndex = EasyCsv.ColumnNames()?.IndexOf(InternalColumnNames.Tags) ?? -1;
    int referenceColumnIndex = EasyCsv.ColumnNames()?.IndexOf(InternalColumnNames.References) ?? -1;
    string[] columnNames = EasyCsv.ColumnNames()!;
    @foreach (var test in _referencesBackDropsOpen)
    {
        <MudPopover @onclick="() => { _referencesBackDropsOpen[test.Key] = false; _referencesOpen[test.Key] = false; }" Class="easy-csv-fullscreen-backdrop" Open="_referencesOpen[test.Key]">
            <ChildContent>
                @{
                    @if (_referencesBackDropsOpen[test.Key] != true)
                    {
                        _referencesBackDropsOpen[test.Key] = true;
                        StateHasChanged();
                    }
                }
            </ChildContent>
        </MudPopover>
    }

    <MudTable T="CsvRow" Class="csv-processing-table" FixedHeader="true" RowsPerPage="10" Items="GetFilteredRows()"
              Striped Bordered Dense Hover Elevation="2" ToolBarContent="@ToolBarContent()" >
        <HeaderContent>
            @if (Stepper.TagsAndReferencesLocation == ColumnLocation.Beginning)
            {
                @if (tagsColumnIndex >= 0)
                {
                    <MudTh>Tags</MudTh>
                }

                @if (referenceColumnIndex >= 0)
                {
                    <MudTh>References</MudTh>
                }
            }
            @for (var i = 0; i < columnNames.Length; i++)
            {
                int mid = columnNames.Length / 2;
                var anchorOrigin = i >= mid ? Origin.BottomLeft : Origin.BottomRight;
                var transformOrigin = i >= mid ? Origin.TopRight : Origin.TopLeft;
                var column = columnNames[i];
                if (i == tagsColumnIndex || i == referenceColumnIndex) continue;
                <MudTh Class="csv-processing-table-th">
                    <div style="display: flex; flex-direction: row; gap: 10px; align-items: center;">
                        <div class="csv-processing-table-th-name" >
                            @column
                        </div>
                        <div class="csv-processing-table-th-button">
                            <MudIconButton Disabled="Busy" Icon="@Stepper.ViewColumnOperationsIcon" OnClick="_ => TogglePopover(column)"></MudIconButton>
                        </div>
                    </div>
                    @StrategyBucketPopover(column, anchorOrigin, transformOrigin, fullCsv: false)
                </MudTh>
            }
            @if (Stepper.TagsAndReferencesLocation == ColumnLocation.End)
            {
                @if (referenceColumnIndex >= 0)
                {
                    <MudTh>References</MudTh>
                }

                @if (tagsColumnIndex >= 0)
                {
                    <MudTh>Tags</MudTh>
                }
            }
        </HeaderContent>
        <RowTemplate Context="row">
            @if (Stepper.TagsAndReferencesLocation == ColumnLocation.Beginning)
            {
                @TagDataCell(tagsColumnIndex, row)
                @ReferencesDataCell(referenceColumnIndex, row)
            }
            @for (int i = 0; i < row.Count; i++)
            {
                var value = row.ValueAt(i);
                if (i != tagsColumnIndex && i != referenceColumnIndex)
                {
                    <MudTd Class="extra-dense">@value</MudTd>
                }
            }
            @if (Stepper.TagsAndReferencesLocation == ColumnLocation.End)
            {
                @ReferencesDataCell(referenceColumnIndex, row)
                @TagDataCell(tagsColumnIndex, row)
            }
        </RowTemplate>
        <PagerContent>
            <MudTablePager></MudTablePager>
        </PagerContent>
    </MudTable>
}

@code {
    internal static Color[] DefaultColors = [Color.Primary, Color.Secondary, Color.Success, Color.Error, Color.Tertiary, Color.Dark, Color.Warning];

    [Parameter] public Func<IGrouping<int, (int ReferenceCsvId, int ReferenceRowId)>, string>? FormatReferenceText { get; set; } 
    [Parameter] public RenderFragment<string>? ColumnOptions { get; set; }
    [Parameter] public RenderFragment? FullCsvOptions { get; set; }
    [Parameter] public CsvProcessingStepper Stepper { get; set; } = null!;
    [Parameter] public bool Busy { get; set; } 
    [Parameter] public IEasyCsv? EasyCsv
    {
        get => _easyCsv;
        set
        {
            _easyCsv = value;
            OnEasyCsvChanged();
        }
    }

    private readonly record struct ReferenceGroup(CsvRow Row, int ReferenceGroupIndex);

    private Dictionary<ReferenceGroup, bool> _referencesOpen = new();
    private Dictionary<ReferenceGroup, bool> _referencesBackDropsOpen = new();
    private Dictionary<string, bool> _columnPopOverDict = new ();
    private string[] SearchColumns { get; set; } = [];
    private string[] _searchTags = [];
    private Dictionary<string, StrategyBucket> _columnStrategyBuckets = new();
    private Dictionary<string, Color> _tagColors = new();
    private IEasyCsv? _easyCsv;
    private string? _sq;

    public IEnumerable<CsvRow> GetFilteredRows()
    {
        if (IsFiltered())
        {
            var tagsColumnIndex = EasyCsv?.ColumnNames()?.IndexOf(x => x == InternalColumnNames.Tags) ?? -1;
            return EasyCsv?.CsvContent.Where(x => x.AnyColumnContainsValues(SearchColumns, _sq) && (tagsColumnIndex < 0 || x.MatchesIncludeTagsAndExcludeTags(tagsColumnIndex, _searchTags, null))) ?? Enumerable.Empty<CsvRow>();
        }
        return EasyCsv?.CsvContent ?? Enumerable.Empty<CsvRow>();
    }

    [Pure]
    internal HashSet<int> FilteredRowIndexes()
    {
        var tagsColumnIndex = EasyCsv?.ColumnNames()?.IndexOf(x => x == InternalColumnNames.Tags) ?? -1;
        return EasyCsv?.CsvContent
            .Select((row, index) => (row, index))
            .Where(x => x.row.AnyColumnContainsValues(SearchColumns, _sq))
            .Where(x => tagsColumnIndex < 0 || x.row.MatchesIncludeTagsAndExcludeTags(tagsColumnIndex, _searchTags, null))
            .Select(x => x.index)
            .ToHashSet() ?? new HashSet<int>();
    }

    public bool IsFiltered()
    {
        if ((SearchColumns.Length > 0 && !string.IsNullOrWhiteSpace(_sq)) || _searchTags.Length > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    private void AddTag(string tag)
    {
        if (!_tagColors.ContainsKey(tag))
        {
            int colorIndex = _tagColors.Count % DefaultColors.Length;
            Color color = DefaultColors[colorIndex];
            _tagColors.Add(tag, color);
        }
    }

    private void OnEasyCsvChanged()
    {
        _columnPopOverDict.Clear();
        _columnStrategyBuckets.Clear();
        _referencesBackDropsOpen.Clear();
        _referencesOpen.Clear();
        var columnNames = EasyCsv?.ColumnNames();
        if (Stepper?.AutoSelectAllColumnsToSearch == true && columnNames != null)
        {
            SearchColumns = columnNames;
        }
        else if (columnNames != null)
        {
            SearchColumns = SearchColumns.Where(x => columnNames.Contains(x)).ToArray();
        }
        else
        {
            SearchColumns = [];
        }
    }

    public Task SetSearchQuery(string? searchQuery)
    {
        if ((string.IsNullOrWhiteSpace(searchQuery) && string.IsNullOrWhiteSpace(_sq)) || _sq?.Equals(searchQuery) == true) return Task.CompletedTask;
        _sq = searchQuery;
        return InvokeStateHasChanged();
    }

    internal void TogglePopover(string column)
    {
        bool value = _columnPopOverDict[column];
        if (value)
        {
            _columnPopOverDict[column] = false;
        }
        else if (!_columnPopOverDict.Values.Any(x => x)) _columnPopOverDict[column] = true;
    }

    internal void TogglePopover(string column, bool open)
    {
        if (!open) _columnPopOverDict[column] = open;
        else if (!_columnPopOverDict.Values.Any(x => x)) _columnPopOverDict[column] = true;
    }

    private void RemoveTag(CsvRow row, int tagsColumnIndex, string tag)
    {
        row.RemoveTag(tagsColumnIndex, tag);
    }

    private void RemoveReference(CsvRow row, int referencesColumnIndex, int referenceCsvId, int referenceRowId)
    {
        row.RemoveReference(referencesColumnIndex, referenceCsvId, referenceRowId);
    }

    private void RemoveReference(CsvRow row, string tag, int tagsIndex)
    {
        var tags = row.ValueAt(tagsIndex)?.ToString()?.Split(",", StringSplitOptions.TrimEntries | StringSplitOptions.RemoveEmptyEntries);
        int? tagIndex = tags?.IndexOf(tag);
        if (tagIndex >= 0)
        {
            string newTagsStr = string.Join(",", tags!.Take(tagsIndex).Skip(1));
            row.SetValueAtIndex(tagsIndex, newTagsStr); 
        }
    }

    private string DefaultFormatReferenceText(IGrouping<int, (int CsvIndex, int RowIndex)> grouping)
    {
        var count = grouping.Count();
        string rows = count == 1 ? "Row" : "Rows";
        return $"Ref Csv: {grouping.Key + 1}, {rows}: {string.Join(" | ", grouping.Select(x => x.RowIndex + 1))}";
    }

    internal Task InvokeStateHasChanged()
    {
        return InvokeAsync(StateHasChanged);
    }

    private RenderFragment? TagDataCell(int tagsColumnIndex, CsvRow row)
    {
        if (tagsColumnIndex >= 0)
        {
            var tags = row.ValueAt(tagsColumnIndex)?.ToString()?.Split(",", StringSplitOptions.TrimEntries | StringSplitOptions.RemoveEmptyEntries);
            return @<MudTd Class="extra-dense">
                       @if (tags?.Any() == true)
                       {
                           <MudChipSet AllClosable="true">
                               @foreach (var tag in tags)
                               {
                                   AddTag(tag);
                                   <MudChip Text="@tag" Color="_tagColors[tag]" Size="Size.Small" OnClose="x => RemoveTag(row, tagsColumnIndex, tag)"/>
                               }
                           </MudChipSet>
                       }
                   </MudTd>;
        }
        return null;
    }

    private RenderFragment ToolBarContent()
    {
        var columnNames = EasyCsv?.ColumnNames();
        return @<div class="csv-processing-toolbar">
                   <div class="csv-processing-toolbar-atlas">
                       <div class="csv-processing-toolbar-atlas-item" style="margin-bottom: 7px" >
                           Click <span class="mx-2" ><MudIcon Icon="@Stepper.ViewFullCsvOperationsIcon"></MudIcon></span>to view&nbsp;<b>full csv</b>&nbsp;strategies
                       </div>
                       <div class="csv-processing-toolbar-atlas-item" >
                           Click <span class="mx-2" ><MudIcon Icon="@Stepper.ViewColumnOperationsIcon"></MudIcon></span>to view&nbsp;<b>column</b>&nbsp;strategies
                       </div>
                   </div>
                   @if (Stepper.UseSearchBar && columnNames != null)
                   {
                       <div class="csv-processing-toolbar-options">
                           <div class="csv-processing-toolbar-full-csv-operations-button">
                               <MudIconButton Disabled="Busy" Icon="@Stepper.ViewFullCsvOperationsIcon" OnClick="_ => TogglePopover(InternalColumnNames.FullCsvOperations)"></MudIconButton>
                               @StrategyBucketPopover(InternalColumnNames.FullCsvOperations, Origin.BottomLeft, Origin.TopRight, true)
                           </div>
                           <MudTextField Disabled="Busy" T="string" Class="csv-processing-toolbar-search-field" DebounceInterval="Stepper.SearchDebounceInterval" Immediate="true" Label="Search Csv"
                                         HelperText="Value to search for" HelperTextOnFocus Variant="Variant.Outlined" Value="_sq" ValueChanged="x => SetSearchQuery(x)"
                                         Clearable OnClearButtonClick="x => SetSearchQuery(null)"/>
                           <CascadingValue TValue="CsvProcessingStepper" Value="@Stepper" IsFixed="true">
                               <MultiColumnSelect Disabled="Busy" InitializeWithStrategyBucketColumnName="false" Label="Columns To Search" @bind-ColumnNames="SearchColumns" SelectAll="true" SelectAllText="Search All Columns"></MultiColumnSelect>
                               <MultiTagSelect Disabled="Busy" Label="Tag Filter" @bind-Tags="_searchTags" HideNoTags="true"></MultiTagSelect>
                           </CascadingValue>
                       </div>
                   }
                   else
                   {
                       <div class="csv-processing-toolbar-full-csv-operations-button">
                           <MudIconButton Disabled="Busy" Icon="@Stepper.ViewFullCsvOperationsIcon" OnClick="_ => TogglePopover(InternalColumnNames.FullCsvOperations)"></MudIconButton>
                           @StrategyBucketPopover(InternalColumnNames.FullCsvOperations, Origin.BottomLeft, Origin.TopRight, true)
                       </div>
                   }
               </div>;
    }

    private RenderFragment StrategyBucketPopover(string column, Origin anchorOrigin, Origin transformOrigin, bool fullCsv)
    {
        _columnPopOverDict.TryAdd(column, false);
        if (!_columnStrategyBuckets.ContainsKey(column))
        {
            _columnStrategyBuckets.Add(column, new StrategyBucket(column, InvokeStateHasChanged));
        }
        _columnStrategyBuckets[column].SetOrigins(anchorOrigin, transformOrigin);
        return @<MudPopover Open="_columnPopOverDict[column]" Style="@($"max-height:{Stepper.MaxStrategySelectHeight}")" Class="csv-processing-popover"
                            OverflowBehavior="OverflowBehavior.FlipAlways" AnchorOrigin="anchorOrigin" TransformOrigin="transformOrigin">
                   <CascadingValue TValue="CsvProcessingStepper" Value="Stepper" IsFixed="true">
                       <CascadingValue TValue="StrategyBucket" Value="_columnStrategyBuckets[column]" IsFixed="true">
                           <MudList Clickable="true" Style="z-index: inherit">
                               <MudListSubheader>
                                   <div style="display: flex; flex-direction: row; justify-content: space-between">
                                       <MudText Class="mt-4" Typo="Typo.h5">
                                           @if (fullCsv)
                                           {
                                               @:Full Csv Strategies
                                           }
                                           else
                                           {
                                               @:Column Strategies&nbsp;
                                               @if (Stepper.ShowColumnNameInStrategySelect)
                                               {
                                                   @:(@column)
                                               }
                                           }
                                       </MudText>
                                       <MudIconButton Icon="@Icons.Material.Filled.Close" OnClick="x => TogglePopover(column, false)"></MudIconButton>
                                   </div>
                               </MudListSubheader>
                               @if (Stepper.SearchBar)
                               {
                                   <MudListItem>
                                       <MudTextField T="string" Disabled="_columnStrategyBuckets[column].IsAnySelected()" Immediate="true" Placeholder="Search strategies" Variant="Variant.Outlined" Value="_columnStrategyBuckets[column].SearchQuery"
                                                     ValueChanged="_columnStrategyBuckets[column].SetSearchQuery"
                                                     Clearable="true" OnClearButtonClick="() => _columnStrategyBuckets[column].SetSearchQuery(string.Empty)"></MudTextField>
                                   </MudListItem>
                               }
                               @if (fullCsv)
                               {
                                   if (FullCsvOptions != null)
                                   {
                                       @FullCsvOptions
                                   }
                               }
                               else if (ColumnOptions != null)
                               {
                                   @ColumnOptions(column)
                               }
                               @if (_columnStrategyBuckets[column].IsAnySelected() || Stepper.RunOperationNoneSelectedBehaviour == RunOperationNoneSelectedBehaviour.Disabled)
                               {
                                   <MudListItem>
                                       <div style="display: flex; flex-direction: row; align-items: center; justify-content: space-between;">
                                           <div></div>
                                           <MudButton Disabled="!_columnStrategyBuckets[column].StrategySelectedAndRunAllowed()" Variant="Variant.Filled" Color="Color.Info" OnClick="x => _columnStrategyBuckets[column].StrategyPicked()">Run Operation</MudButton>
                                       </div>
                                   </MudListItem>
                               }
                           </MudList>
                           @if (_columnPopOverDict[column] && Stepper.CloseBehaviour is CloseBehaviour.ClickAway or CloseBehaviour.CloseButtonAndClickAway)
                           {
                               <div @onclick="() => TogglePopover(column, false)" class="easy-csv-fullscreen-backdrop"></div>
                           }
                       </CascadingValue>
                   </CascadingValue>
               </MudPopover>;
    }

    private RenderFragment? ReferencesDataCell(int referenceColumnIndex, CsvRow row)
    {
        if (referenceColumnIndex >= 0)
        {
            var anchorOrigin = Stepper.TagsAndReferencesLocation == ColumnLocation.Beginning ? Origin.BottomRight : Origin.BottomLeft;
            var transformOrigin = Stepper.TagsAndReferencesLocation == ColumnLocation.Beginning ? Origin.TopLeft : Origin.TopRight;
            var references = row.References(referenceColumnIndex);
            return @<MudTd Class="extra-dense">
                       @if (references?.Any() == true && Stepper.Runner?.ReferenceCsvs.Count > 0)
                       {
                           int i = -1;
                           <MudChipSet>
                               @foreach (IGrouping<int, (int CsvIndex, int RowIndex)> group in references.Where(x => Utils.IsValidIndex(x.CsvIndex, Stepper.Runner?.ReferenceCsvs.Count ?? -1)).GroupBy(x => x.CsvIndex))
                               {
                                   i++;
                                   int groupIndex = i;
                                   var referenceGroup = new ReferenceGroup(row, groupIndex);
                                   _referencesOpen.TryAdd(referenceGroup, false);
                                   _referencesBackDropsOpen.TryAdd(referenceGroup, false); 
                                   string text = FormatReferenceText != null
                                       ? FormatReferenceText(group)
                                       : DefaultFormatReferenceText(group);
                                   <MudChip Text="@text" Color="@Stepper.ReferenceChipColor" Size="Size.Small" OnClick="x => _referencesOpen[referenceGroup] = true"/>
                                   <MudPopover AnchorOrigin="anchorOrigin" TransformOrigin="transformOrigin" Style="color: var(--mud-palette-dark-text); background-color: var(--mud-palette-grey-darker); padding: 10px; max-width: 1000px;" Open="_referencesOpen[referenceGroup]">
                                       <ChildContent>
                                           @{
                                               string referencesStr = references.Length == 1 ? "reference" : "references";
                                               var dictionaryArray = new Dictionary<string, string?>[references.Length];
                                               int j = 0;
                                               foreach (var reference in references)
                                               {
                                                   dictionaryArray[j] = Stepper.Runner.ReferenceCsvs[reference.CsvIndex].Csv.CsvContent[reference.RowIndex].ToStringDictionary();
                                                   j++;
                                               }
                                           }
                                           @ExampleCsv(dictionaryArray, $"{references.Length} {referencesStr} in {Stepper.Runner.ReferenceCsvs[group.Key].FileName}", false)
                                       </ChildContent>
                                   </MudPopover>

                               }
                           </MudChipSet>
                       }
                   </MudTd>;
        }
        return null;
    }
}
