@using EasyCsv.Core.Configuration
@using CsvHelper.Configuration
@using System.Globalization
@using EasyCsv.Components.Enums
@using EasyCsv.Processing.Strategies
@page "/processing"
<style>
    @@media (min-width: 1280px) {
        .mud-container.mud-container-maxwidth-lg {
            max-width: 1600px;
        }
    }
</style>

@if (_easyCsv != null)
{
<CsvProcessingStepper @ref="_csvProcessor" EasyCsvFileName="Example.csv" EasyCsv="_easyCsv"
                      DelayAfterProgressMilliseconds="50"
                      StrategySelectCloseBehaviour="_strategySelectCloseBehaviour"
                      HideOtherStrategiesOnSelect="_hideOtherStrategiesOnSelect"
                      ForceIndeterminate="_forceIndeterminate"
                      EnableRowEditing="_enableRowEditing"
                      EnableRowDeleting="_enableRowDeleting"
                      EnableSorting="_enableSorting"
                      EnableAddReferenceCsv="_enableAddReferenceCsv"
                      EnableChangeEditColumnValueType="_enableChangeEditColumnValueType"
                      RunOperationNoneSelectedVisibility="_runOperationNoneSelectedVisibility"
                      TagsAndReferencesLocation="_tagsAndReferencesLocation"
                      ResolveDuplicatesAutoSelect="_resolveDuplicatesAutoSelect"
                      EnableControlTagsAndReferencesLocation="_enableControlTagsAndReferencesLocation"
                      HideExpandUnselected="_hideExpandUnselected"
                      DefaultDownloadFileName="@_defaultDownloadFileName"
                      EnableAutoControlExpandOptionsOnSelect="_enableAutoControlExpandOptionsOnSelect"
                      AutoSelectAllColumnsDownload="_autoSelectAllColumnsDownload"
                      AutoSelectAllColumnsSearch="_autoSelectAllColumnsSearch"
                      DefaultColumnValueType="_defaultColumnValueType"
                      UseProgressContext="_useSnackbar" 
                      >
    <ColumnStrategies>
        <FindDedupesExactMatchColumn MustSelectRow="false" />
        <ConditionalDelete />
        <ConditionalTag />
        <StringSplitColumn />
        <StringReplace  ></StringReplace>
        <DivideAndReplicate />
        <TagAndReferenceMatches />
        <StrategyItem DisplayName="Tag Invalid Email" DescriptionStr="Tag all rows with an invalid email in $column_name"
                      BeforeCsvExample="BeforeExample" AfterCsvExample="AfterExample" StrategyPicked="OnTagPicked" />
    </ColumnStrategies>
    <FullCsvStrategies>
        <AddCsv />
        <CombineColumns />
    </FullCsvStrategies>
    <AfterCurrentStep>
        <MudTooltip Text="Reset if you want to upload your own csv to use with the tool." Style="max-width: 250px;">
            <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="() => _easyCsv = null!">Reset</MudButton>
        </MudTooltip>
    </AfterCurrentStep>
</CsvProcessingStepper>
}
else if (_loaded)
{
    <CsvFileInput CsvValid="_easyCsv != null" OnCsvUpload="x => _easyCsv = x.Csv" > </CsvFileInput>
}
@if (_easyCsv != null)
{
    <br />
    <br />
    <MudText Typo="Typo.h5">Configurations</MudText>
    <br />
    <div style="display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 15px 25px;">
        <MudCheckBox @bind-Value="_enableRowEditing" Color="Color.Primary">Enable Row Editing</MudCheckBox>
        <MudCheckBox @bind-Value="_enableRowDeleting" Color="Color.Primary">Enable Row Deleting</MudCheckBox>
        <MudCheckBox @bind-Value="_enableSorting" Color="Color.Primary">Enable Sorting</MudCheckBox>
        <MudCheckBox @bind-Value="_useSnackbar" Color="Color.Primary">Use Snackbar</MudCheckBox>
        <MudCheckBox @bind-Value="_hideOtherStrategiesOnSelect" Color="Color.Primary">Hide Other Strategies On Select</MudCheckBox>
        <MudCheckBox @bind-Value="_forceIndeterminate" Color="Color.Primary">Force Indeterminate Progress</MudCheckBox>
        <MudCheckBox @bind-Value="_enableAddReferenceCsv" Color="Color.Primary">Enable Add Reference CSV</MudCheckBox>
        <MudCheckBox @bind-Value="_enableChangeEditColumnValueType" Color="Color.Primary">Enable Change Edit Column Value Type</MudCheckBox>
        <MudCheckBox @bind-Value="_enableControlTagsAndReferencesLocation" Color="Color.Primary">Enable Control Tags And References Location</MudCheckBox>
        <MudCheckBox @bind-Value="_hideExpandUnselected" Color="Color.Primary">Hide Expand Unselected</MudCheckBox>
        <MudCheckBox @bind-Value="_enableAutoControlExpandOptionsOnSelect" Color="Color.Primary">Enable Auto Control Expand Options On Select</MudCheckBox>
        <MudCheckBox @bind-Value="_autoSelectAllColumnsDownload" Color="Color.Primary">Auto Select All Columns Download</MudCheckBox>
        <MudCheckBox @bind-Value="_autoSelectAllColumnsSearch" Color="Color.Primary">Auto Select All Columns Search</MudCheckBox>
        <MudTextField @bind-Value="@_defaultDownloadFileName" Label="Default Download File Name" Variant="Variant.Filled" />
        <MudSelect T="CloseBehaviour" @bind-Value="_strategySelectCloseBehaviour" Label="Strategy Select Close Behaviour" Variant="Variant.Filled">
            @foreach (var item in Enum.GetValues<CloseBehaviour>())
            {
                <MudSelectItem T="CloseBehaviour" Value="@item">@item</MudSelectItem>
            }
        </MudSelect>

        <MudSelect T="RunOperationNoneSelectedVisibility" @bind-Value="_runOperationNoneSelectedVisibility" Label="Run Operation None Selected Visibility" Variant="Variant.Filled">
            @foreach (var item in Enum.GetValues<RunOperationNoneSelectedVisibility>())
            {
                <MudSelectItem T="RunOperationNoneSelectedVisibility" Value="@item">@item</MudSelectItem>
            }
        </MudSelect>

        <MudSelect T="ColumnLocation" @bind-Value="_tagsAndReferencesLocation" Label="Tags and References Location" Variant="Variant.Filled">
            @foreach (var item in Enum.GetValues<ColumnLocation>())
            {
                <MudSelectItem T="ColumnLocation" Value="@item">@item</MudSelectItem>
            }
        </MudSelect>

        <MudSelect T="ResolveDuplicatesAutoSelect" @bind-Value="_resolveDuplicatesAutoSelect" Label="Resolve Duplicates Auto Select" Variant="Variant.Filled">
            @foreach (var item in Enum.GetValues<ResolveDuplicatesAutoSelect>())
            {
                <MudSelectItem T="ResolveDuplicatesAutoSelect" Value="@item">@item</MudSelectItem>
            }
        </MudSelect>

        <MudSelect T="ColumnValueType" @bind-Value="_defaultColumnValueType" Label="Default Column Value Type" Variant="Variant.Filled">
            @foreach (var item in Enum.GetValues<ColumnValueType>())
            {
                <MudSelectItem T="ColumnValueType" Value="@item">@item</MudSelectItem>
            }
        </MudSelect>
    </div>
}
@code {
    [Inject] public NavigationManager NavigationManager { get; set; } = null!;
    [Inject] public ISnackbar? Snackbar { get; set; }


    private bool _enableSorting = true;
    private bool _useSnackbar = true;
    private bool _hideOtherStrategiesOnSelect = true;
    private bool _forceIndeterminate = false;
    private bool _enableRowEditing = true;
    private bool _enableRowDeleting = true;
    private bool _enableAddReferenceCsv = true;
    private bool _enableChangeEditColumnValueType = true;
    private bool _enableControlTagsAndReferencesLocation = true;
    private bool _hideExpandUnselected = false;
    private string _defaultDownloadFileName = "WorkingCsvSnapshot";
    private bool _enableAutoControlExpandOptionsOnSelect = true;
    private bool _autoSelectAllColumnsDownload = true;
    private bool _autoSelectAllColumnsSearch = true;
    
    private CloseBehaviour _strategySelectCloseBehaviour = CloseBehaviour.CloseButtonAndClickAway;
    private RunOperationNoneSelectedVisibility _runOperationNoneSelectedVisibility = RunOperationNoneSelectedVisibility.Hidden;
    private ColumnLocation _tagsAndReferencesLocation = ColumnLocation.Beginning;
    private ResolveDuplicatesAutoSelect _resolveDuplicatesAutoSelect = ResolveDuplicatesAutoSelect.None;
    private ColumnValueType _defaultColumnValueType = ColumnValueType.Text;

    private CsvProcessingStepper _csvProcessor = null!;
    private IEasyCsv? _easyCsv;
    private bool _loaded = false;
    protected override async Task OnInitializedAsync()
    {
        _easyCsv = await EasyCsvFactory.FromUrlAsync(NavigationManager.BaseUri + "_content/ExampleBlazorApp.Shared/person_data.csv", 5)!;
        _loaded = true;

    }

    private static readonly Dictionary<string, string>[] BeforeExample =
    [
        new Dictionary<string, string>()
        {
            {"Email", "not an email"},
        },
        new Dictionary<string, string>()
        {
            {"Email", "real-email@test.com"},
        }
    ];
    private static readonly Dictionary<string, string>[] AfterExample =
    [
        new Dictionary<string, string>()
        {
            {"Email", "not an email"},
            {InternalColumnNames.Tags, "Invalid Email"},
        },
        new Dictionary<string, string>()
        {
            {"Email", "real-email@test.com"},
            {InternalColumnNames.Tags, ""},
        }
    ];
    private async Task OnTagPicked(string columnName)
    {
        var addTagStrategy = new TagRowsStrategy((row, tags) =>
        {
            string? rowStr = row[columnName]?.ToString();
            if (!string.IsNullOrWhiteSpace(rowStr) && rowStr.Contains("@") == false)
            {
                tags.Add("Invalid Email");
            }
        });
        await _csvProcessor.PerformCsvStrategy(addTagStrategy);
    }

    private static EasyCsvConfiguration Config = new EasyCsvConfiguration()
    {
        CsvHelperConfig = new CsvConfiguration(CultureInfo.CurrentCulture),
        GiveEmptyHeadersNames = true
    };

}
