@using EasyCsv.Core.Configuration
@using CsvHelper.Configuration
@using System.Globalization
@using EasyCsv.Processing.Strategies
@page "/processing"
<style>
    @@media (min-width: 1280px) {
        .mud-container.mud-container-maxwidth-lg {
            max-width: 1600px;
        }
    }
</style>

@if (_easyCsv != null)
{
    <CsvProcessingStepper @ref="_csvProcessor" EasyCsvFileName="Example.csv" EasyCsv="_easyCsv"
                          ResolveDuplicatesAutoSelect="ResolveDuplicatesAutoSelect.FirstRow" HideExpandUnselected="true">
        <ColumnStrategies>
            <FindDedupesExactMatchColumn MustSelectRow="false" />
            <StringSplitColumn />
            <DivideAndReplicate />
            <TagAndReferenceMatches />
            <DeleteOnEmptyColumn />
            <StrategyItem DisplayName="Tag Invalid Email" DescriptionStr="Tag all rows with an invalid email in $column_name"
                          BeforeCsvExample="_beforeExample" AfterCsvExample="_afterExample" StrategyPicked="OnTagPicked" />
        </ColumnStrategies>
        <FullCsvStrategies>
            <AddCsv />
            <CombineColumns />
        </FullCsvStrategies>
        <AfterCurrentStep>
            <MudTooltip Text="Reset if you want to upload your own csv to use with the tool." Style="max-width: 250px;">
                <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="() => _easyCsv = null!">Reset</MudButton>
            </MudTooltip>
        </AfterCurrentStep>
    </CsvProcessingStepper>
}
else if (_loaded)
{
    <CsvFileInput CsvValid="_easyCsv != null" OnCsvUpload="x => _easyCsv = x.Csv" > </CsvFileInput>
}
@code {
    [Inject] public NavigationManager NavigationManager { get; set; }
    [Inject] public ISnackbar? Snackbar { get; set; }
    private CsvProcessingStepper _csvProcessor = null!;
    private IEasyCsv? _easyCsv;
    private bool _loaded = false;
    protected override async Task OnInitializedAsync()
    {
        _easyCsv = await EasyCsvFactory.FromUrlAsync(NavigationManager.BaseUri + "_content/ExampleBlazorApp.Shared/person_data.csv", 5)!;
        _loaded = true;

    }

    private static readonly Dictionary<string, string>[] _beforeExample =
    [
        new Dictionary<string, string>()
        {
            {"Email", "not an email"},
        },
        new Dictionary<string, string>()
        {
            {"Email", "real-email@test.com"},
        }
    ];
    private static readonly Dictionary<string, string>[] _afterExample =
    [
        new Dictionary<string, string>()
        {
            {"Email", "not an email"},
            {InternalColumnNames.Tags, "Invalid Email"},
        },
        new Dictionary<string, string>()
        {
            {"Email", "real-email@test.com"},
            {InternalColumnNames.Tags, ""},
        }
    ];
    private async Task OnTagPicked(string columnName)
    {
        var addTagStrategy = new TagRowsStrategy((row, tags) =>
        {
            string? rowStr = row[columnName]?.ToString();
            if (!string.IsNullOrWhiteSpace(rowStr) && rowStr.Contains("@") == false)
            {
                tags.Add("Invalid Email");
            }
        });
        var transformCellText = new TransformValueStrategy(columnName, x => x?.ToString() + "Test");
        await _csvProcessor.PerformColumnStrategy(transformCellText);
        //await _csvProcessor.PerformCsvStrategy(addTagStrategy);
    }

    private static EasyCsvConfiguration Config = new EasyCsvConfiguration()
    {
        CsvHelperConfig = new CsvConfiguration(CultureInfo.CurrentCulture),
        GiveEmptyHeadersNames = true
    };

}
