@using EasyCsv.Core.Configuration
@using EasyCsv.Processing
@using CsvHelper.Configuration
@using System.Globalization
@page "/processing"
<CsvProcessingStepper @ref="_csvProcessor" EasyCsv="_easyCsv">
    <ProcessingOptions>
        <StringSplitStrategyOptions ></StringSplitStrategyOptions>
        <DivideAndReplicateStrategyOptions ></DivideAndReplicateStrategyOptions>
        <CombineStrategyItem ></CombineStrategyItem>
        <StrategyItem DisplayName="Tag Invalid Email" Description="Tag all rows with an invalid email on specified column"
                      BeforeCsvExample="_beforeExample" AfterCsvExample="_afterExample" StrategyPicked="OnTagPicked"/>
    </ProcessingOptions>
</CsvProcessingStepper>
@code {
    [Parameter] public ISnackbar? Snackbar { get; set; }
    private CsvProcessingStepper _csvProcessor = null!;
    private readonly IEasyCsv? _easyCsv = EasyCsvFactory.FromString("header1,header2\nvalue1,value2-value3", Config);
    private static Dictionary<string, string>[] _beforeExample =
    [
        new Dictionary<string, string>()
        {
            {"Email", "not an email"},
        },
        new Dictionary<string, string>()
        {
            {"Email", "real-email@test.com"},
        }
    ];
    private static Dictionary<string, string>[] _afterExample =
    [
        new Dictionary<string, string>()
        {
            {"Email", "not an email"},
            {InternalColumnNames.Tags, "Invalid Email"},
        },
        new Dictionary<string, string>()
        {
            {"Email", "real-email@test.com"},
            {InternalColumnNames.Tags, ""},
        }
    ];
    private async Task OnTagPicked(string columnName)
    {
        var addTagStrategy = new TagRowsStrategy((row, tags) =>
        {
            string? rowStr = row[columnName]?.ToString();
            if (!string.IsNullOrWhiteSpace(rowStr) && rowStr.Contains("@") == false)
            {
                tags.Add("Invalid Email");
            }
        });
        await _csvProcessor.PerformCsvStrategy(addTagStrategy);
    }

    private static EasyCsvConfiguration Config = new EasyCsvConfiguration()
    {
        CsvHelperConfig = new CsvConfiguration(CultureInfo.CurrentCulture),
        GiveEmptyHeadersNames = true
    };

}
