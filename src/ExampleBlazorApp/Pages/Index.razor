@page "/"
@page "/index.html"
@using EasyCsv.Components
@using EasyCsv.Core

<PageTitle>Index</PageTitle>

@if (_easyCsv == null)
{
    <div class="mb-4 d-flex gap-5" style="flex-direction: row; align-items: baseline;">
        <MudText Class="mb-4" Typo="Typo.h4">Csv File Input</MudText>
        <MudButton Style="height: fit-content;" Variant="Variant.Filled" Color="Color.Info" OnClick="GetTestCsv"  >Use Test Csv</MudButton>
    </div>

    <CsvFileInput CsvValid="_easyCsv != null" OnCsvUpload="x => _easyCsv = x.Csv" > </CsvFileInput>
}
else
{
    <div class="mb-4 d-flex gap-5" style="flex-direction: row; align-items: baseline;">
        <MudText Class="mb-4" Typo="Typo.h4">Csv Table Header Matcher</MudText>
        <MudButton Style="height: fit-content;" Variant="Variant.Filled" Color="Color.Error" OnClick="() => { _easyCsv = null; _frozen = false; _records = null; }">Reset</MudButton>
    </div>

    <CsvTableHeaderMatcher @ref="_tableHeaderMatcher" Csv="_easyCsv" Frozen="_frozen" AllHeadersValidChanged="StateHasChanged" ExpectedHeaders="_expectedHeaders" AutoMatch="AutoMatching.Lenient"   ></CsvTableHeaderMatcher>
    <div class="mt-4 d-flex gap-5" style="flex-direction: row; align-items: center;" >
        <MudCheckBox @bind-Checked="_frozen" Color="Color.Primary">Frozen</MudCheckBox>
        <MudButton Disabled="!_tableHeaderMatcher?.ValidateRequiredHeaders() ?? true" Color="Color.Primary" Variant="Variant.Filled" OnClick="GetRecords" >Get Records</MudButton>
    </div>
}

@if (_records != null)
{
    <MudTable Class="mt-7" Items="_records" Outlined Bordered Dense Hover Striped>
        <HeaderContent>
            <MudTh >First Name</MudTh>
            <MudTh >Last Name</MudTh>
            <MudTh >Email</MudTh>
            <MudTh >Age</MudTh>
            <MudTh >City</MudTh>
            <MudTh >County</MudTh>
            <MudTh >Signed Up</MudTh>
            <MudTh >Date Of Birth</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.FirstName</MudTd>
            <MudTd>@context.LastName</MudTd>
            <MudTd>@context.Email</MudTd>
            <MudTd>@context.Age</MudTd>
            <MudTd>@context.City</MudTd>
            <MudTd>@context.Country</MudTd>
            <MudTd>@context.SignedUp?.ToShortDateString()</MudTd>
            <MudTd>@context.DateOfBirth?.ToShortDateString()</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager></MudTablePager>
        </PagerContent>
    </MudTable>
}

<br/>

<MudText Class="mb-4" Typo="Typo.h4">Code</MudText>


<div style="border: 1px solid var(--mud-palette-lines-default); background-color: var(--mud-palette-background-grey); border-radius: 8px;">
    <IndexCode></IndexCode>
</div>


@code {
    [Inject] private NavigationManager NavigationManager { get; set; } = null!;

    private CsvTableHeaderMatcher? _tableHeaderMatcher;
    private IEasyCsv? _easyCsv;
    private bool _frozen;

    private List<Person>? _records;

    private readonly List<ExpectedHeader> _expectedHeaders = new ()
    {
        new ExpectedHeader(nameof(Person.FirstName), ExpectedHeaderConfig.Required),
        new ExpectedHeader(nameof(Person.LastName), ExpectedHeaderConfig.Required),
        new ExpectedHeader(nameof(Person.Email), ExpectedHeaderConfig.Required),
        new ExpectedHeader(nameof(Person.Age), new ExpectedHeaderConfig(DefaultValueType.Numerical, required: true)),
        new ExpectedHeader(nameof(Person.City)),
        new ExpectedHeader(nameof(Person.Country), new ExpectedHeaderConfig(DefaultValueType.Text, required: true, "USA")),
        new ExpectedHeader(nameof(Person.SignedUp), new ExpectedHeaderConfig(DefaultValueType.DateTime)),
        new ExpectedHeader(nameof(Person.Num)),
    };

    protected override void OnInitialized()
    {
        _expectedHeaders.Add(new ExpectedHeader(nameof(Person.DateOfBirth), "Custom Date Time Input", [nameof(Person.DateOfBirth)], x => x.DefaultValueRenderFragment = CustomDateTimeDefaultValueFragment()));
    }

    private async Task GetTestCsv()
    {
        _easyCsv = await EasyCsvFactory.FromUrlAsync(NavigationManager.BaseUri + "person_data.csv", 5);
    }

    private async Task GetRecords()
    {
        if (_tableHeaderMatcher == null) return;
        _records = await _tableHeaderMatcher.GetRecords<Person>();
    }

    private class Person
    {
        public string? FirstName { get; set; }
        public string? LastName { get; set; }
        public string? Email { get; set; }
        public string? City { get; set; }
        public string? Country { get; set; }
        public DateTime? SignedUp { get; set; }
        public DateTime? DateOfBirth { get; set; }
        public int Age { get; set; }
        public int? Num { get; set; }
    }

    private RenderFragment<DefaultValueRenderFragmentArgs> CustomDateTimeDefaultValueFragment()
    {
        return args =>
        {
            return @<MudDatePicker Disabled="args.Frozen" Variant="Variant.Outlined" DateChanged="x => args.DefaultValueChanged(x)"></MudDatePicker>;
        };
    }
}